{
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.11.13",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kaggle": {
      "accelerator": "none",
      "dataSources": [
        {
          "sourceId": 12540105,
          "sourceType": "datasetVersion",
          "datasetId": 7916764
        }
      ],
      "dockerImageVersionId": 31089,
      "isInternetEnabled": false,
      "language": "python",
      "sourceType": "notebook",
      "isGpuEnabled": false
    },
    "colab": {
      "name": "Practical 5",
      "provenance": [],
      "include_colab_link": true
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "d14c1ce986dd441dba0548a30a737521": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c958317b273c490da905b918797adcbc"
            ],
            "layout": "IPY_MODEL_cf356ce9a0354c3a966446b044a17e5a"
          }
        },
        "98c5b1d7c2ea41dea248d9d9d3636ed6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_2370768201bf40fb9d63b8d3b6d52d33",
            "placeholder": "​",
            "style": "IPY_MODEL_cd20d7f860894f91beb27c0d3912e097",
            "value": "<center> <img\nsrc=https://www.kaggle.com/static/images/site-logo.png\nalt='Kaggle'> <br> Create an API token from <a\nhref=\"https://www.kaggle.com/settings/account\" target=\"_blank\">your Kaggle\nsettings page</a> and paste it below along with your Kaggle username. <br> </center>"
          }
        },
        "5b5cdc65dc2b4ee183ff192be9da45aa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "TextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "TextView",
            "continuous_update": true,
            "description": "Username:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_4614fa76acda4cd1bdd9da43645eb47a",
            "placeholder": "​",
            "style": "IPY_MODEL_d8ab5402079c429f8512260e8fcbaf88",
            "value": "pavandevmurari"
          }
        },
        "1d19e1318d374800b66cd22056fd583b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "PasswordModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "PasswordModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "PasswordView",
            "continuous_update": true,
            "description": "Token:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_8c2c0aa3bba74a508b4ef42d09c247cc",
            "placeholder": "​",
            "style": "IPY_MODEL_8836c74db05c401c86a73ff459c98061",
            "value": ""
          }
        },
        "1648bbd9b7af43339c9935447af8702e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Login",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_96da82e87ec340bfabc96b242b10afb6",
            "style": "IPY_MODEL_c955fa6dd409496993a372d6c5508332",
            "tooltip": ""
          }
        },
        "a614cdc27abb4d82ac795b652554f116": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ee5f2079af5a493a80cd7e33bb71b1e0",
            "placeholder": "​",
            "style": "IPY_MODEL_32c217dcd01f4f8ebe55b76af26cdd56",
            "value": "\n<b>Thank You</b></center>"
          }
        },
        "cf356ce9a0354c3a966446b044a17e5a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": "center",
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": "flex",
            "flex": null,
            "flex_flow": "column",
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": "50%"
          }
        },
        "2370768201bf40fb9d63b8d3b6d52d33": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cd20d7f860894f91beb27c0d3912e097": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "4614fa76acda4cd1bdd9da43645eb47a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d8ab5402079c429f8512260e8fcbaf88": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "8c2c0aa3bba74a508b4ef42d09c247cc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8836c74db05c401c86a73ff459c98061": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "96da82e87ec340bfabc96b242b10afb6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c955fa6dd409496993a372d6c5508332": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        },
        "ee5f2079af5a493a80cd7e33bb71b1e0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "32c217dcd01f4f8ebe55b76af26cdd56": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1efb9bdf5f8d430b8c5acc173306c421": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_06a100861eb94a97b787a0d9adbcbedc",
            "placeholder": "​",
            "style": "IPY_MODEL_31fff2484f0b47289aef770128465e5c",
            "value": "Connecting..."
          }
        },
        "06a100861eb94a97b787a0d9adbcbedc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "31fff2484f0b47289aef770128465e5c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c958317b273c490da905b918797adcbc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "LabelModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "LabelModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "LabelView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_c27b2bd5fa6d4ff3a1086bb1709061f3",
            "placeholder": "​",
            "style": "IPY_MODEL_cac872686537447593e7492b51e07527",
            "value": "Kaggle credentials successfully validated."
          }
        },
        "c27b2bd5fa6d4ff3a1086bb1709061f3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cac872686537447593e7492b51e07527": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat_minor": 0,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/PAVAN-DEVMURARI/ML-Practicals/blob/main/Practical_5.json\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "source": [
        "# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE\n",
        "# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.\n",
        "import kagglehub\n",
        "kagglehub.login()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 84,
          "referenced_widgets": [
            "d14c1ce986dd441dba0548a30a737521",
            "98c5b1d7c2ea41dea248d9d9d3636ed6",
            "5b5cdc65dc2b4ee183ff192be9da45aa",
            "1d19e1318d374800b66cd22056fd583b",
            "1648bbd9b7af43339c9935447af8702e",
            "a614cdc27abb4d82ac795b652554f116",
            "cf356ce9a0354c3a966446b044a17e5a",
            "2370768201bf40fb9d63b8d3b6d52d33",
            "cd20d7f860894f91beb27c0d3912e097",
            "4614fa76acda4cd1bdd9da43645eb47a",
            "d8ab5402079c429f8512260e8fcbaf88",
            "8c2c0aa3bba74a508b4ef42d09c247cc",
            "8836c74db05c401c86a73ff459c98061",
            "96da82e87ec340bfabc96b242b10afb6",
            "c955fa6dd409496993a372d6c5508332",
            "ee5f2079af5a493a80cd7e33bb71b1e0",
            "32c217dcd01f4f8ebe55b76af26cdd56",
            "1efb9bdf5f8d430b8c5acc173306c421",
            "06a100861eb94a97b787a0d9adbcbedc",
            "31fff2484f0b47289aef770128465e5c",
            "c958317b273c490da905b918797adcbc",
            "c27b2bd5fa6d4ff3a1086bb1709061f3",
            "cac872686537447593e7492b51e07527"
          ]
        },
        "id": "e39JCNIMK6h5",
        "outputId": "19a1b2ef-2fda-4f1d-834b-ee0f0d9a295f"
      },
      "cell_type": "code",
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(HTML(value='<center> <img\\nsrc=https://www.kaggle.com/static/images/site-logo.png\\nalt=\\'Kaggle…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "d14c1ce986dd441dba0548a30a737521"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Kaggle credentials set.\n",
            "Kaggle credentials successfully validated.\n"
          ]
        }
      ],
      "execution_count": 7
    },
    {
      "source": [
        "# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n",
        "# THEN FEEL FREE TO DELETE THIS CELL.\n",
        "# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n",
        "# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n",
        "# NOTEBOOK.\n",
        "\n",
        "pavandevmurari_diabetes_path = kagglehub.dataset_download('pavandevmurari/diabetes')\n",
        "\n",
        "print('Data source import complete.')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tnzfFCDYK6h8",
        "outputId": "8a5fe240-bdc7-44e0-90d8-8eaea787c5b4"
      },
      "cell_type": "code",
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data source import complete.\n"
          ]
        }
      ],
      "execution_count": 8
    },
    {
      "cell_type": "code",
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load\n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "# Input data files are available in the read-only \"../input/\" directory\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n",
        "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n",
        "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
      ],
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.072696Z",
          "iopub.execute_input": "2025-07-22T04:21:04.073Z",
          "iopub.status.idle": "2025-07-22T04:21:04.102896Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.072976Z",
          "shell.execute_reply": "2025-07-22T04:21:04.102048Z"
        },
        "id": "w_H1D9Q1K6h8"
      },
      "outputs": [],
      "execution_count": 9
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/diabetes.csv')"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.104177Z",
          "iopub.execute_input": "2025-07-22T04:21:04.104467Z",
          "iopub.status.idle": "2025-07-22T04:21:04.11209Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.104447Z",
          "shell.execute_reply": "2025-07-22T04:21:04.111234Z"
        },
        "id": "vC55Qz0DK6h9"
      },
      "outputs": [],
      "execution_count": 10
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.113251Z",
          "iopub.execute_input": "2025-07-22T04:21:04.11353Z",
          "iopub.status.idle": "2025-07-22T04:21:04.135062Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.113509Z",
          "shell.execute_reply": "2025-07-22T04:21:04.134071Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EwPdpubcK6h9",
        "outputId": "b5f2b1ca-07cf-4db7-9c4f-f85da13f078a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 768 entries, 0 to 767\n",
            "Data columns (total 9 columns):\n",
            " #   Column                    Non-Null Count  Dtype  \n",
            "---  ------                    --------------  -----  \n",
            " 0   Pregnancies               768 non-null    int64  \n",
            " 1   Glucose                   768 non-null    int64  \n",
            " 2   BloodPressure             768 non-null    int64  \n",
            " 3   SkinThickness             768 non-null    int64  \n",
            " 4   Insulin                   768 non-null    int64  \n",
            " 5   BMI                       768 non-null    float64\n",
            " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
            " 7   Age                       768 non-null    int64  \n",
            " 8   Outcome                   768 non-null    int64  \n",
            "dtypes: float64(2), int64(7)\n",
            "memory usage: 54.1 KB\n"
          ]
        }
      ],
      "execution_count": 11
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.135931Z",
          "iopub.execute_input": "2025-07-22T04:21:04.136149Z",
          "iopub.status.idle": "2025-07-22T04:21:04.156939Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.136133Z",
          "shell.execute_reply": "2025-07-22T04:21:04.156153Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Dx6WuHcpK6h-",
        "outputId": "fc59ad93-a029-4b9d-8c1a-0229699b301a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(768, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "execution_count": 12
    },
    {
      "cell_type": "code",
      "source": [
        "df.sample(10)"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.159129Z",
          "iopub.execute_input": "2025-07-22T04:21:04.159409Z",
          "iopub.status.idle": "2025-07-22T04:21:04.18347Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.159388Z",
          "shell.execute_reply": "2025-07-22T04:21:04.182579Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "gwboBLS9K6h-",
        "outputId": "0875a657-6acd-4a49-e77d-654d872ead4d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "633            1      128             82             17      183  27.5   \n",
              "141            5      106             82             30        0  39.5   \n",
              "552            6      114             88              0        0  27.8   \n",
              "555            7      124             70             33      215  25.5   \n",
              "188            8      109             76             39      114  27.9   \n",
              "496            5      110             68              0        0  26.0   \n",
              "40             3      180             64             25       70  34.0   \n",
              "349            5        0             80             32        0  41.0   \n",
              "285            7      136             74             26      135  26.0   \n",
              "394            4      158             78              0        0  32.9   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  Outcome  \n",
              "633                     0.115   22        0  \n",
              "141                     0.286   38        0  \n",
              "552                     0.247   66        0  \n",
              "555                     0.161   37        0  \n",
              "188                     0.640   31        1  \n",
              "496                     0.292   30        0  \n",
              "40                      0.271   26        0  \n",
              "349                     0.346   37        1  \n",
              "285                     0.647   51        0  \n",
              "394                     0.803   31        1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c7dcd567-f40e-4ab9-9ba5-91ed98ce3b96\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>633</th>\n",
              "      <td>1</td>\n",
              "      <td>128</td>\n",
              "      <td>82</td>\n",
              "      <td>17</td>\n",
              "      <td>183</td>\n",
              "      <td>27.5</td>\n",
              "      <td>0.115</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>141</th>\n",
              "      <td>5</td>\n",
              "      <td>106</td>\n",
              "      <td>82</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>39.5</td>\n",
              "      <td>0.286</td>\n",
              "      <td>38</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>552</th>\n",
              "      <td>6</td>\n",
              "      <td>114</td>\n",
              "      <td>88</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>27.8</td>\n",
              "      <td>0.247</td>\n",
              "      <td>66</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>555</th>\n",
              "      <td>7</td>\n",
              "      <td>124</td>\n",
              "      <td>70</td>\n",
              "      <td>33</td>\n",
              "      <td>215</td>\n",
              "      <td>25.5</td>\n",
              "      <td>0.161</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188</th>\n",
              "      <td>8</td>\n",
              "      <td>109</td>\n",
              "      <td>76</td>\n",
              "      <td>39</td>\n",
              "      <td>114</td>\n",
              "      <td>27.9</td>\n",
              "      <td>0.640</td>\n",
              "      <td>31</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>496</th>\n",
              "      <td>5</td>\n",
              "      <td>110</td>\n",
              "      <td>68</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0.292</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>3</td>\n",
              "      <td>180</td>\n",
              "      <td>64</td>\n",
              "      <td>25</td>\n",
              "      <td>70</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.271</td>\n",
              "      <td>26</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>349</th>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>80</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>41.0</td>\n",
              "      <td>0.346</td>\n",
              "      <td>37</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>285</th>\n",
              "      <td>7</td>\n",
              "      <td>136</td>\n",
              "      <td>74</td>\n",
              "      <td>26</td>\n",
              "      <td>135</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0.647</td>\n",
              "      <td>51</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>394</th>\n",
              "      <td>4</td>\n",
              "      <td>158</td>\n",
              "      <td>78</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>32.9</td>\n",
              "      <td>0.803</td>\n",
              "      <td>31</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c7dcd567-f40e-4ab9-9ba5-91ed98ce3b96')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c7dcd567-f40e-4ab9-9ba5-91ed98ce3b96 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c7dcd567-f40e-4ab9-9ba5-91ed98ce3b96');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7daa8bbb-e2f6-4fd7-8620-5ecc8ca400e2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7daa8bbb-e2f6-4fd7-8620-5ecc8ca400e2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7daa8bbb-e2f6-4fd7-8620-5ecc8ca400e2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"Pregnancies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 1,\n        \"max\": 8,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47,\n        \"min\": 0,\n        \"max\": 180,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          136,\n          106,\n          110\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": 64,\n        \"max\": 88,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          74,\n          88,\n          64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 39,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          30,\n          25,\n          17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 84,\n        \"min\": 0,\n        \"max\": 215,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          183,\n          0,\n          135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.743102142764154,\n        \"min\": 25.5,\n        \"max\": 41.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          41.0,\n          39.5,\n          26.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DiabetesPedigreeFunction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23173346758722618,\n        \"min\": 0.115,\n        \"max\": 0.803,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.647,\n          0.286,\n          0.292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 22,\n        \"max\": 66,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          38,\n          30,\n          22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "execution_count": 13
    },
    {
      "cell_type": "code",
      "source": [
        "# confusion mat\n",
        "unique_val = df['Outcome'].value_counts()"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.184535Z",
          "iopub.execute_input": "2025-07-22T04:21:04.184866Z",
          "iopub.status.idle": "2025-07-22T04:21:04.20456Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.184838Z",
          "shell.execute_reply": "2025-07-22T04:21:04.203567Z"
        },
        "id": "OMGKIsd3K6h-"
      },
      "outputs": [],
      "execution_count": 14
    },
    {
      "cell_type": "code",
      "source": [
        "unique_val"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.205531Z",
          "iopub.execute_input": "2025-07-22T04:21:04.205835Z",
          "iopub.status.idle": "2025-07-22T04:21:04.225216Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.205802Z",
          "shell.execute_reply": "2025-07-22T04:21:04.224179Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "2mz46y6dK6h-",
        "outputId": "ad65e8ff-619b-4850-cd6b-53ab73dc2a8d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Outcome\n",
              "0    500\n",
              "1    268\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outcome</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>268</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "execution_count": 15
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:21:04.226541Z",
          "iopub.execute_input": "2025-07-22T04:21:04.227013Z",
          "iopub.status.idle": "2025-07-22T04:21:04.249738Z",
          "shell.execute_reply.started": "2025-07-22T04:21:04.226969Z",
          "shell.execute_reply": "2025-07-22T04:21:04.249032Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "xzraNTlrK6h_",
        "outputId": "eb8602fa-d959-4fb2-dedd-05d1baee5329"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "0              6      148             72             35        0  33.6   \n",
              "1              1       85             66             29        0  26.6   \n",
              "2              8      183             64              0        0  23.3   \n",
              "3              1       89             66             23       94  28.1   \n",
              "4              0      137             40             35      168  43.1   \n",
              "..           ...      ...            ...            ...      ...   ...   \n",
              "763           10      101             76             48      180  32.9   \n",
              "764            2      122             70             27        0  36.8   \n",
              "765            5      121             72             23      112  26.2   \n",
              "766            1      126             60              0        0  30.1   \n",
              "767            1       93             70             31        0  30.4   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  Outcome  \n",
              "0                       0.627   50        1  \n",
              "1                       0.351   31        0  \n",
              "2                       0.672   32        1  \n",
              "3                       0.167   21        0  \n",
              "4                       2.288   33        1  \n",
              "..                        ...  ...      ...  \n",
              "763                     0.171   63        0  \n",
              "764                     0.340   27        0  \n",
              "765                     0.245   30        0  \n",
              "766                     0.349   47        1  \n",
              "767                     0.315   23        0  \n",
              "\n",
              "[768 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e57c0cb-982e-4e48-b050-0b749e26d105\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "      <th>Outcome</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6</td>\n",
              "      <td>148</td>\n",
              "      <td>72</td>\n",
              "      <td>35</td>\n",
              "      <td>0</td>\n",
              "      <td>33.6</td>\n",
              "      <td>0.627</td>\n",
              "      <td>50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>66</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0.351</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8</td>\n",
              "      <td>183</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>23.3</td>\n",
              "      <td>0.672</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>89</td>\n",
              "      <td>66</td>\n",
              "      <td>23</td>\n",
              "      <td>94</td>\n",
              "      <td>28.1</td>\n",
              "      <td>0.167</td>\n",
              "      <td>21</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>137</td>\n",
              "      <td>40</td>\n",
              "      <td>35</td>\n",
              "      <td>168</td>\n",
              "      <td>43.1</td>\n",
              "      <td>2.288</td>\n",
              "      <td>33</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>763</th>\n",
              "      <td>10</td>\n",
              "      <td>101</td>\n",
              "      <td>76</td>\n",
              "      <td>48</td>\n",
              "      <td>180</td>\n",
              "      <td>32.9</td>\n",
              "      <td>0.171</td>\n",
              "      <td>63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>764</th>\n",
              "      <td>2</td>\n",
              "      <td>122</td>\n",
              "      <td>70</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>36.8</td>\n",
              "      <td>0.340</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>765</th>\n",
              "      <td>5</td>\n",
              "      <td>121</td>\n",
              "      <td>72</td>\n",
              "      <td>23</td>\n",
              "      <td>112</td>\n",
              "      <td>26.2</td>\n",
              "      <td>0.245</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>766</th>\n",
              "      <td>1</td>\n",
              "      <td>126</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.1</td>\n",
              "      <td>0.349</td>\n",
              "      <td>47</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>767</th>\n",
              "      <td>1</td>\n",
              "      <td>93</td>\n",
              "      <td>70</td>\n",
              "      <td>31</td>\n",
              "      <td>0</td>\n",
              "      <td>30.4</td>\n",
              "      <td>0.315</td>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>768 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e57c0cb-982e-4e48-b050-0b749e26d105')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3e57c0cb-982e-4e48-b050-0b749e26d105 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3e57c0cb-982e-4e48-b050-0b749e26d105');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9f3cb9b1-8f09-45f5-9656-ffaafa817e6c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9f3cb9b1-8f09-45f5-9656-ffaafa817e6c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9f3cb9b1-8f09-45f5-9656-ffaafa817e6c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_6ff7cb4f-3488-43ca-b894-dc7aac235e66\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_6ff7cb4f-3488-43ca-b894-dc7aac235e66 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 768,\n  \"fields\": [\n    {\n      \"column\": \"Pregnancies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 17,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          6,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 0,\n        \"max\": 199,\n        \"num_unique_values\": 136,\n        \"samples\": [\n          151,\n          101,\n          112\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19,\n        \"min\": 0,\n        \"max\": 122,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          86,\n          46,\n          85\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          7,\n          12,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115,\n        \"min\": 0,\n        \"max\": 846,\n        \"num_unique_values\": 186,\n        \"samples\": [\n          52,\n          41,\n          183\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.8841603203754405,\n        \"min\": 0.0,\n        \"max\": 67.1,\n        \"num_unique_values\": 248,\n        \"samples\": [\n          19.9,\n          31.0,\n          38.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DiabetesPedigreeFunction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.33132859501277484,\n        \"min\": 0.078,\n        \"max\": 2.42,\n        \"num_unique_values\": 517,\n        \"samples\": [\n          1.731,\n          0.426,\n          0.138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 21,\n        \"max\": 81,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          60,\n          47,\n          72\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Outcome\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "execution_count": 16
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:26:25.852271Z",
          "iopub.execute_input": "2025-07-22T04:26:25.852577Z",
          "iopub.status.idle": "2025-07-22T04:26:25.973025Z",
          "shell.execute_reply.started": "2025-07-22T04:26:25.852556Z",
          "shell.execute_reply": "2025-07-22T04:26:25.972175Z"
        },
        "id": "W7Toiqy8K6h_"
      },
      "outputs": [],
      "execution_count": 17
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.iloc[:,:-1]\n",
        "y = df['Outcome']"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:27:53.703022Z",
          "iopub.execute_input": "2025-07-22T04:27:53.703371Z",
          "iopub.status.idle": "2025-07-22T04:27:53.70964Z",
          "shell.execute_reply.started": "2025-07-22T04:27:53.703344Z",
          "shell.execute_reply": "2025-07-22T04:27:53.708682Z"
        },
        "id": "4U3hw9pFK6h_"
      },
      "outputs": [],
      "execution_count": 18
    },
    {
      "cell_type": "code",
      "source": [
        "X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.2,random_state=42)"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:28:39.446518Z",
          "iopub.execute_input": "2025-07-22T04:28:39.447511Z",
          "iopub.status.idle": "2025-07-22T04:28:39.45555Z",
          "shell.execute_reply.started": "2025-07-22T04:28:39.44748Z",
          "shell.execute_reply": "2025-07-22T04:28:39.454418Z"
        },
        "id": "xlAnchrvK6h_"
      },
      "outputs": [],
      "execution_count": 19
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:28:50.706344Z",
          "iopub.execute_input": "2025-07-22T04:28:50.706684Z",
          "iopub.status.idle": "2025-07-22T04:28:50.720017Z",
          "shell.execute_reply.started": "2025-07-22T04:28:50.706653Z",
          "shell.execute_reply": "2025-07-22T04:28:50.719059Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "QrQnAy7zK6h_",
        "outputId": "b3823e82-5940-4690-f5cf-2781b7536535"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "60             2       84              0              0        0   0.0   \n",
              "618            9      112             82             24        0  28.2   \n",
              "346            1      139             46             19       83  28.7   \n",
              "294            0      161             50              0        0  21.9   \n",
              "231            6      134             80             37      370  46.2   \n",
              "..           ...      ...            ...            ...      ...   ...   \n",
              "71             5      139             64             35      140  28.6   \n",
              "106            1       96            122              0        0  22.4   \n",
              "270           10      101             86             37        0  45.6   \n",
              "435            0      141              0              0        0  42.4   \n",
              "102            0      125             96              0        0  22.5   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  \n",
              "60                      0.304   21  \n",
              "618                     1.282   50  \n",
              "346                     0.654   22  \n",
              "294                     0.254   65  \n",
              "231                     0.238   46  \n",
              "..                        ...  ...  \n",
              "71                      0.411   26  \n",
              "106                     0.207   27  \n",
              "270                     1.136   38  \n",
              "435                     0.205   29  \n",
              "102                     0.262   21  \n",
              "\n",
              "[614 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe02e484-d038-4a9d-8eba-e549f5acdce5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>2</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.304</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>618</th>\n",
              "      <td>9</td>\n",
              "      <td>112</td>\n",
              "      <td>82</td>\n",
              "      <td>24</td>\n",
              "      <td>0</td>\n",
              "      <td>28.2</td>\n",
              "      <td>1.282</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>346</th>\n",
              "      <td>1</td>\n",
              "      <td>139</td>\n",
              "      <td>46</td>\n",
              "      <td>19</td>\n",
              "      <td>83</td>\n",
              "      <td>28.7</td>\n",
              "      <td>0.654</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>294</th>\n",
              "      <td>0</td>\n",
              "      <td>161</td>\n",
              "      <td>50</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>21.9</td>\n",
              "      <td>0.254</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>231</th>\n",
              "      <td>6</td>\n",
              "      <td>134</td>\n",
              "      <td>80</td>\n",
              "      <td>37</td>\n",
              "      <td>370</td>\n",
              "      <td>46.2</td>\n",
              "      <td>0.238</td>\n",
              "      <td>46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>71</th>\n",
              "      <td>5</td>\n",
              "      <td>139</td>\n",
              "      <td>64</td>\n",
              "      <td>35</td>\n",
              "      <td>140</td>\n",
              "      <td>28.6</td>\n",
              "      <td>0.411</td>\n",
              "      <td>26</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>1</td>\n",
              "      <td>96</td>\n",
              "      <td>122</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22.4</td>\n",
              "      <td>0.207</td>\n",
              "      <td>27</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>10</td>\n",
              "      <td>101</td>\n",
              "      <td>86</td>\n",
              "      <td>37</td>\n",
              "      <td>0</td>\n",
              "      <td>45.6</td>\n",
              "      <td>1.136</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>435</th>\n",
              "      <td>0</td>\n",
              "      <td>141</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>42.4</td>\n",
              "      <td>0.205</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>0</td>\n",
              "      <td>125</td>\n",
              "      <td>96</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22.5</td>\n",
              "      <td>0.262</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>614 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe02e484-d038-4a9d-8eba-e549f5acdce5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fe02e484-d038-4a9d-8eba-e549f5acdce5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fe02e484-d038-4a9d-8eba-e549f5acdce5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9a06e306-47b5-4128-811b-68f273017699\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a06e306-47b5-4128-811b-68f273017699')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9a06e306-47b5-4128-811b-68f273017699 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c77550f9-29cb-4de6-bbae-2db1319724fb\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c77550f9-29cb-4de6-bbae-2db1319724fb button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_train",
              "summary": "{\n  \"name\": \"X_train\",\n  \"rows\": 614,\n  \"fields\": [\n    {\n      \"column\": \"Pregnancies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 17,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          2,\n          9,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 0,\n        \"max\": 199,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          89,\n          90,\n          61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 18,\n        \"min\": 0,\n        \"max\": 122,\n        \"num_unique_values\": 44,\n        \"samples\": [\n          48,\n          54,\n          58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 0,\n        \"max\": 63,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          21,\n          14,\n          42\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116,\n        \"min\": 0,\n        \"max\": 846,\n        \"num_unique_values\": 167,\n        \"samples\": [\n          220,\n          193,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.740625077902244,\n        \"min\": 0.0,\n        \"max\": 67.1,\n        \"num_unique_values\": 225,\n        \"samples\": [\n          19.1,\n          31.9,\n          34.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DiabetesPedigreeFunction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3368467485503899,\n        \"min\": 0.078,\n        \"max\": 2.42,\n        \"num_unique_values\": 443,\n        \"samples\": [\n          0.404,\n          0.342,\n          0.26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 21,\n        \"max\": 81,\n        \"num_unique_values\": 52,\n        \"samples\": [\n          42,\n          45,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "execution_count": 20
    },
    {
      "cell_type": "code",
      "source": [
        "X_test"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:31:27.933204Z",
          "iopub.execute_input": "2025-07-22T04:31:27.933489Z",
          "iopub.status.idle": "2025-07-22T04:31:27.946007Z",
          "shell.execute_reply.started": "2025-07-22T04:31:27.933469Z",
          "shell.execute_reply": "2025-07-22T04:31:27.945208Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "zBUtzeaLK6h_",
        "outputId": "dcab1866-a617-4643-a3d9-553d01673fcf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
              "668            6       98             58             33      190  34.0   \n",
              "324            2      112             75             32        0  35.7   \n",
              "624            2      108             64              0        0  30.8   \n",
              "690            8      107             80              0        0  24.6   \n",
              "473            7      136             90              0        0  29.9   \n",
              "..           ...      ...            ...            ...      ...   ...   \n",
              "355            9      165             88              0        0  30.4   \n",
              "534            1       77             56             30       56  33.3   \n",
              "344            8       95             72              0        0  36.8   \n",
              "296            2      146             70             38      360  28.0   \n",
              "462            8       74             70             40       49  35.3   \n",
              "\n",
              "     DiabetesPedigreeFunction  Age  \n",
              "668                     0.430   43  \n",
              "324                     0.148   21  \n",
              "624                     0.158   21  \n",
              "690                     0.856   34  \n",
              "473                     0.210   50  \n",
              "..                        ...  ...  \n",
              "355                     0.302   49  \n",
              "534                     1.251   24  \n",
              "344                     0.485   57  \n",
              "296                     0.337   29  \n",
              "462                     0.705   39  \n",
              "\n",
              "[154 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ccd7afd9-1928-41b2-bb48-2a5a6350e06c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Pregnancies</th>\n",
              "      <th>Glucose</th>\n",
              "      <th>BloodPressure</th>\n",
              "      <th>SkinThickness</th>\n",
              "      <th>Insulin</th>\n",
              "      <th>BMI</th>\n",
              "      <th>DiabetesPedigreeFunction</th>\n",
              "      <th>Age</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>668</th>\n",
              "      <td>6</td>\n",
              "      <td>98</td>\n",
              "      <td>58</td>\n",
              "      <td>33</td>\n",
              "      <td>190</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0.430</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>324</th>\n",
              "      <td>2</td>\n",
              "      <td>112</td>\n",
              "      <td>75</td>\n",
              "      <td>32</td>\n",
              "      <td>0</td>\n",
              "      <td>35.7</td>\n",
              "      <td>0.148</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>624</th>\n",
              "      <td>2</td>\n",
              "      <td>108</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.8</td>\n",
              "      <td>0.158</td>\n",
              "      <td>21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>690</th>\n",
              "      <td>8</td>\n",
              "      <td>107</td>\n",
              "      <td>80</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>24.6</td>\n",
              "      <td>0.856</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>473</th>\n",
              "      <td>7</td>\n",
              "      <td>136</td>\n",
              "      <td>90</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>29.9</td>\n",
              "      <td>0.210</td>\n",
              "      <td>50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>355</th>\n",
              "      <td>9</td>\n",
              "      <td>165</td>\n",
              "      <td>88</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>30.4</td>\n",
              "      <td>0.302</td>\n",
              "      <td>49</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>534</th>\n",
              "      <td>1</td>\n",
              "      <td>77</td>\n",
              "      <td>56</td>\n",
              "      <td>30</td>\n",
              "      <td>56</td>\n",
              "      <td>33.3</td>\n",
              "      <td>1.251</td>\n",
              "      <td>24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>344</th>\n",
              "      <td>8</td>\n",
              "      <td>95</td>\n",
              "      <td>72</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>36.8</td>\n",
              "      <td>0.485</td>\n",
              "      <td>57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>2</td>\n",
              "      <td>146</td>\n",
              "      <td>70</td>\n",
              "      <td>38</td>\n",
              "      <td>360</td>\n",
              "      <td>28.0</td>\n",
              "      <td>0.337</td>\n",
              "      <td>29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>462</th>\n",
              "      <td>8</td>\n",
              "      <td>74</td>\n",
              "      <td>70</td>\n",
              "      <td>40</td>\n",
              "      <td>49</td>\n",
              "      <td>35.3</td>\n",
              "      <td>0.705</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>154 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ccd7afd9-1928-41b2-bb48-2a5a6350e06c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ccd7afd9-1928-41b2-bb48-2a5a6350e06c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ccd7afd9-1928-41b2-bb48-2a5a6350e06c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f2dbeeea-7de8-4d1e-b017-45456bb3d6e0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f2dbeeea-7de8-4d1e-b017-45456bb3d6e0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f2dbeeea-7de8-4d1e-b017-45456bb3d6e0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_fefec0b2-1ac9-4611-9445-4848a2dea8d0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_fefec0b2-1ac9-4611-9445-4848a2dea8d0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X_test",
              "summary": "{\n  \"name\": \"X_test\",\n  \"rows\": 154,\n  \"fields\": [\n    {\n      \"column\": \"Pregnancies\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 0,\n        \"max\": 13,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          3,\n          9,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Glucose\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 62,\n        \"max\": 197,\n        \"num_unique_values\": 87,\n        \"samples\": [\n          115,\n          98,\n          102\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BloodPressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22,\n        \"min\": 0,\n        \"max\": 114,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          110,\n          65,\n          66\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SkinThickness\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          49,\n          16,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Insulin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111,\n        \"min\": 0,\n        \"max\": 579,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          56,\n          182,\n          190\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BMI\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.458726594351939,\n        \"min\": 0.0,\n        \"max\": 53.2,\n        \"num_unique_values\": 117,\n        \"samples\": [\n          37.1,\n          29.9,\n          29.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DiabetesPedigreeFunction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.30915505518318603,\n        \"min\": 0.102,\n        \"max\": 1.39,\n        \"num_unique_values\": 141,\n        \"samples\": [\n          0.317,\n          0.652,\n          0.52\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 21,\n        \"max\": 67,\n        \"num_unique_values\": 39,\n        \"samples\": [\n          63,\n          51,\n          55\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "execution_count": 21
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "for column in df.columns:\n",
        "        plt.figure(figsize=(8, 4))\n",
        "        sns.histplot(df[column], kde=True, bins=30)\n",
        "        plt.title(f'Histogram of {column}')\n",
        "        plt.xlabel(column)\n",
        "        plt.ylabel('Frequency')\n",
        "        plt.tight_layout()\n",
        "        plt.show()"
      ],
      "metadata": {
        "trusted": true,
        "execution": {
          "iopub.status.busy": "2025-07-22T04:41:11.864517Z",
          "iopub.execute_input": "2025-07-22T04:41:11.865661Z",
          "iopub.status.idle": "2025-07-22T04:41:15.036692Z",
          "shell.execute_reply.started": "2025-07-22T04:41:11.865605Z",
          "shell.execute_reply": "2025-07-22T04:41:15.035719Z"
        },
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "NaxDYTeGK6h_",
        "outputId": "83593a13-c392-45f8-ee8c-403405cc71fa"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxYAAAGGCAYAAADmRxfNAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAWe9JREFUeJzt3Xd4FOXexvF7N72HdEJIAULvVQRsgBQLzQKigqIczwsKgg09IqhHBCwcFMUKqCDqsWFBQRCw0HsvoQRIgSSk9+y8fyB7DDVkN2zK93NdeyU788wzv9nMwt4788yYDMMwBAAAAAA2MDu6AAAAAABVH8ECAAAAgM0IFgAAAABsRrAAAAAAYDOCBQAAAACbESwAAAAA2IxgAQAAAMBmBAsAAAAANiNYAAAAALAZwQJAjRcdHa3hw4c7uoxqb/r06apXr56cnJzUunVrm/tbsWKFTCaT/vvf/1603dy5c2UymXT48GGb13khhw8flslk0iuvvHLJtpMmTZLJZLrsdURHR+vmm28uT3kAcEUQLABUK2c+RG7YsOG886+77jo1b97c5vX8+OOPmjRpks391BRLlizRE088oS5dumjOnDl66aWXLtr+u+++07XXXquQkBB5enqqXr16uuOOO/TTTz9doYpPf5A3mUyXfMydO/eK1QQAlZmzowsAAEfbu3evzObL+57lxx9/1KxZswgXZbR8+XKZzWZ98MEHcnV1vWjbV155RY8//riuvfZaTZgwQZ6enjpw4IB++eUXLVy4UL17976sdd9zzz0aPHiw3NzcLmu5GTNmKDs72/r8xx9/1KeffqrXX39dQUFB1ulXX331ZfX7r3/9S0899dRlLQMAVQHBAkCNd7kfOCuDnJwceXl5ObqMMjtx4oQ8PDwuGSqKi4v1wgsvqGfPnlqyZMl5+7lcTk5OcnJyuuzl+vfvX+p5UlKSPv30U/Xv31/R0dGl5l3OaVbOzs5ydua/XwDVD6dCAajxzh5jUVRUpMmTJys2Nlbu7u4KDAxU165dtXTpUknS8OHDNWvWLEkqdUrMGTk5ORo/frzq1q0rNzc3NWrUSK+88ooMwyi13ry8PD3yyCMKCgqSj4+Pbr31Vh0/flwmk6nUkZAz5+Tv2rVLd911l2rVqqWuXbtKkrZt26bhw4erXr16cnd3V1hYmO6//36lpqaWWteZPvbt26e7775bfn5+Cg4O1rPPPivDMHT06FH169dPvr6+CgsL06uvvlqm1+5MEKhfv77c3NwUHR2tp59+WgUFBdY2JpNJc+bMUU5OziVPH0pJSVFmZqa6dOly3vkhISEXraegoEA333yz/Pz89Oeff0o6/xiLM+MVfv/9d3Xs2FHu7u6qV6+ePvroozJt98W8++671tejQ4cOWr9+fan5Fxpj8cknn6hjx47y9PRUrVq1dM0115w3XP3dvHnz5OzsrMcff1xS6bEel6pDkvbs2aPbbrtNAQEBcnd3V/v27bVo0aJSbS71fpBOh6777rtPERERcnNzU+3atdWvX78KHdcCoPLhKxMA1VJGRoZSUlLOmV5UVHTJZSdNmqQpU6bogQceUMeOHZWZmakNGzZo06ZN6tmzp/7xj38oISFBS5cu1ccff1xqWcMwdOutt+rXX3/ViBEj1Lp1a/388896/PHHdfz4cb3++uvWtsOHD9fnn3+ue+65R1dddZVWrlypm2666YJ13X777YqNjdVLL71kDSlLly7VwYMHdd999yksLEw7d+7Uu+++q507d2rNmjXnfIC988471aRJE7388sv64Ycf9OKLLyogIEDvvPOObrjhBk2dOlXz58/XY489pg4dOuiaa6656Gv1wAMPaN68ebrttts0fvx4rV27VlOmTNHu3bv19ddfS5I+/vhjvfvuu1q3bp3ef/99SRc+fSgkJEQeHh767rvv9PDDDysgIOCi6/+7vLw89evXTxs2bNAvv/yiDh06XLT9gQMHdNttt2nEiBEaNmyYPvzwQw0fPlzt2rVTs2bNyrzev1uwYIGysrL0j3/8QyaTSdOmTdPAgQN18OBBubi4XHC5yZMna9KkSbr66qv1/PPPy9XVVWvXrtXy5ct14403nneZd999Vw899JCefvppvfjii5ddx86dO9WlSxfVqVNHTz31lLy8vPT555+rf//++vLLLzVgwABJl34/SNKgQYO0c+dOPfzww4qOjtaJEye0dOlSxcfHn3N0B0A1ZgBANTJnzhxD0kUfzZo1K7VMVFSUMWzYMOvzVq1aGTfddNNF1zNq1CjjfP+EfvPNN4Yk48UXXyw1/bbbbjNMJpNx4MABwzAMY+PGjYYkY+zYsaXaDR8+3JBkPPfcc9Zpzz33nCHJGDJkyDnry83NPWfap59+akgyVq1adU4fI0eOtE4rLi42IiIiDJPJZLz88svW6adOnTI8PDxKvSbns2XLFkOS8cADD5Sa/thjjxmSjOXLl1unDRs2zPDy8rpof2dMnDjRkGR4eXkZffr0Mf79738bGzduPKfdr7/+akgyvvjiCyMrK8u49tprjaCgIGPz5s2l2p3ZJw4dOmSdFhUVdc5rdOLECcPNzc0YP378eeuaPn36Of2ccejQIUOSERgYaKSlpVmnf/vtt4Yk47vvvrNOO/O3OGP//v2G2Ww2BgwYYJSUlJTq12KxlKr5zH75n//8xzCZTMYLL7xQ7jq6d+9utGjRwsjPzy+1vquvvtqIjY21TrvU++HUqVOGJGP69OkXbAOgZuBUKADV0qxZs7R06dJzHi1btrzksv7+/tq5c6f2799/2ev98ccf5eTkpEceeaTU9PHjx8swDC1evFiSrFc3+r//+79S7R5++OEL9v3QQw+dM83Dw8P6e35+vlJSUnTVVVdJkjZt2nRO+wceeMD6u5OTk9q3by/DMDRixAjrdH9/fzVq1EgHDx68YC3S6W2VpHHjxpWaPn78eEnSDz/8cNHlL2Ty5MlasGCB2rRpo59//lnPPPOM2rVrp7Zt22r37t3ntM/IyNCNN96oPXv2aMWKFWW+lG3Tpk3VrVs36/Pg4OAybffF3HnnnapVq5b1+Zn+L9bnN998I4vFookTJ55zEYHznTI1bdo0jRkzRlOnTtW//vWvctWRlpam5cuX64477lBWVpZSUlKUkpKi1NRU9erVS/v379fx48clXfr9cGbszIoVK3Tq1KkLbieA6o9gAaBa6tixo3r06HHO4+8fti7k+eefV3p6uho2bKgWLVro8ccf17Zt28q03iNHjig8PFw+Pj6lpjdp0sQ6/8xPs9msmJiYUu0aNGhwwb7Pbiud/oA4ZswYhYaGysPDQ8HBwdZ2GRkZ57SPjIws9dzPz0/u7u6lrnJ0ZvqlPiSe2Yazaw4LC5O/v791W8tjyJAh+u2333Tq1CktWbJEd911lzZv3qxbbrlF+fn5pdqOHTtW69ev1y+//HJZpzCd/VpIUq1atWz6cHx2n2f2t4v1GRcXJ7PZrKZNm16y/5UrV+rJJ5/Uk08+aR1XUZ46Dhw4IMMw9Oyzzyo4OLjU47nnnpP0v4Hyl3o/uLm5aerUqVq8eLFCQ0N1zTXXaNq0aUpKSrrk9gCoXggWAHCWa665RnFxcfrwww/VvHlzvf/++2rbtq11fICj/P3oxBl33HGH3nvvPT300EP66quvtGTJEuvREIvFck77810d6UJXTDLOGmx+IeW52VtZ+fr6qmfPnpo/f76GDRumuLg4rV27tlSbfv36yTAMvfzyy+fd5guxdbuvVJ9/16xZMzVq1Egff/yxDh06VO46zrxOjz322HmP7C1dutQaGMvyfhg7dqz27dunKVOmyN3dXc8++6yaNGmizZs322W7AVQNBAsAOI+AgADdd999+vTTT3X06FG1bNmy1JWaLvRhOioqSgkJCcrKyio1fc+ePdb5Z35aLJZzPhweOHCgzDWeOnVKy5Yt01NPPaXJkydrwIAB6tmzp+rVq1fmPmxxZhvOPkUmOTlZ6enp1m21l/bt20uSEhMTS03v37+/PvzwQy1YsECjRo2y6zqvhPr168tisWjXrl2XbBsUFKRffvlFLi4u6t69uxISEsq1zjP7iIuLy3mP7PXo0aPUUbdLvR/ObMf48eO1ZMkS7dixQ4WFhWW+uhiA6oFgAQBnOftSrd7e3mrQoEGpS6ieuYdEenp6qbZ9+/ZVSUmJ3nzzzVLTX3/9dZlMJvXp00eS1KtXL0nSW2+9VardG2+8UeY6z3wrffa34TNmzChzH7bo27fvedf32muvSdJFr3B1Ibm5uVq9evV5550Zn9KoUaNz5t17772aOXOmZs+erSeffPKy1+tI/fv3l9ls1vPPP3/OEZfzHemIiIjQL7/8ory8PPXs2fOc/bUsQkJCdN111+mdd945J6hJ0smTJ62/X+r9kJube87pafXr15ePj0+p9wyA6o/LzQLAWZo2barrrrtO7dq1U0BAgDZs2KD//ve/Gj16tLVNu3btJEmPPPKIevXqJScnJw0ePFi33HKLrr/+ej3zzDM6fPiwWrVqpSVLlujbb7/V2LFjVb9+fevygwYN0owZM5Sammq93Oy+ffskle30Il9fX+v57EVFRapTp46WLFly0VNk7KlVq1YaNmyY3n33XaWnp+vaa6/VunXrNG/ePPXv31/XX3/9ZfeZm5urq6++WldddZV69+6tunXrKj09Xd98841+++039e/fX23atDnvsqNHj1ZmZqaeeeYZ+fn56emnn7Z1E6+IBg0a6JlnntELL7ygbt26aeDAgXJzc9P69esVHh6uKVOmnHeZJUuW6LrrrlOvXr20fPly+fr6XtZ6Z82apa5du6pFixZ68MEHVa9ePSUnJ2v16tU6duyYtm7dKunS74d9+/ape/fuuuOOO9S0aVM5Ozvr66+/VnJysgYPHmz7CwSgyiBYAMBZHnnkES1atEhLlixRQUGBoqKi9OKLL5YaLDtw4EA9/PDDWrhwoT755BMZhqHBgwfLbDZr0aJFmjhxoj777DPNmTNH0dHRmj59uvVqSWd89NFHCgsL06effqqvv/5aPXr00GeffaZGjRrJ3d29TLUuWLBADz/8sGbNmiXDMHTjjTdq8eLFCg8Pt+trciHvv/++6tWrp7lz5+rrr79WWFiYJkyYYB0AfLn8/f313nvv6YcfftCcOXOUlJQkJycnNWrUSNOnTz/naltne/rpp5WRkWENF1Xl1Kjnn39eMTExeuONN/TMM8/I09NTLVu21D333HPBZVq0aKHFixerR48euuWWW6xja8qqadOm2rBhgyZPnqy5c+cqNTVVISEhatOmjSZOnGhtd6n3Q926dTVkyBAtW7ZMH3/8sZydndW4cWN9/vnnGjRoUPleEABVksmw14gyAIDNtmzZojZt2uiTTz7R0KFDHV0OAABlxhgLAHCQvLy8c6bNmDFDZrP5kne8BgCgsuFUKABwkGnTpmnjxo26/vrr5ezsrMWLF2vx4sUaOXKk6tat6+jyAAC4LJwKBQAOsnTpUk2ePFm7du1Sdna2IiMjdc899+iZZ56RszPf+wAAqhaCBQAAAACbMcYCAAAAgM0IFgAAAABsxkm8kiwWixISEuTj41Omm1IBAAAANYFhGMrKylJ4eLjM5osfkyBYSEpISOAKLAAAAMAFHD16VBERERdtQ7CQ5OPjI+n0C+br6+vgagAAAIDKITMzU3Xr1rV+Xr4YgoVkPf3J19eXYAEAAACcpSzDBRi8DQAAAMBmBAsAAAAANiNYAAAAALAZwQIAAACAzQgWAAAAAGxGsAAAAABgM4IFAAAAAJsRLAAAAADYjGABAAAAwGYECwAAAAA2I1gAAAAAsJmzowvAafHx8UpJSbF7v0FBQYqMjLR7vwAAAMDfESwqgfj4eDVu0kR5ubl279vD01N7du8mXAAAAKBCESwqgZSUFOXl5mrok9MVGlnfbv0mx8dp/tTHlZKSQrAAAABAhSJYVCKhkfUVEdvM0WUAAAAAl43B2wAAAABsRrAAAAAAYDOCBQAAAACbESwAAAAA2IxgAQAAAMBmBAsAAAAANiNYAAAAALAZwQIAAACAzQgWAAAAAGxGsAAAAABgM4IFAAAAAJsRLAAAAADYjGABAAAAwGYECwAAAAA2I1gAAAAAsBnBAgAAAIDNCBYAAAAAbEawAAAAAGAzggUAAAAAmxEsAAAAANiMYAEAAADAZgQLAAAAADYjWAAAAACwGcECAAAAgM0IFgAAAABsRrAAAAAAYDOCBQAAAACbOTRYTJkyRR06dJCPj49CQkLUv39/7d27t1Sb/Px8jRo1SoGBgfL29tagQYOUnJxcqk18fLxuuukmeXp6KiQkRI8//riKi4uv5KYAAAAANZpDg8XKlSs1atQorVmzRkuXLlVRUZFuvPFG5eTkWNs8+uij+u677/TFF19o5cqVSkhI0MCBA63zS0pKdNNNN6mwsFB//vmn5s2bp7lz52rixImO2CQAAACgRnJ25Mp/+umnUs/nzp2rkJAQbdy4Uddcc40yMjL0wQcfaMGCBbrhhhskSXPmzFGTJk20Zs0aXXXVVVqyZIl27dqlX375RaGhoWrdurVeeOEFPfnkk5o0aZJcXV0dsWkAAABAjVKpxlhkZGRIkgICAiRJGzduVFFRkXr06GFt07hxY0VGRmr16tWSpNWrV6tFixYKDQ21tunVq5cyMzO1c+fO866noKBAmZmZpR4AAAAAyq/SBAuLxaKxY8eqS5cuat68uSQpKSlJrq6u8vf3L9U2NDRUSUlJ1jZ/DxVn5p+Zdz5TpkyRn5+f9VG3bl07bw0AAABQs1SaYDFq1Cjt2LFDCxcurPB1TZgwQRkZGdbH0aNHK3ydAAAAQHXm0DEWZ4wePVrff/+9Vq1apYiICOv0sLAwFRYWKj09vdRRi+TkZIWFhVnbrFu3rlR/Z64adabN2dzc3OTm5mbnrQAAAABqLocesTAMQ6NHj9bXX3+t5cuXKyYmptT8du3aycXFRcuWLbNO27t3r+Lj49W5c2dJUufOnbV9+3adOHHC2mbp0qXy9fVV06ZNr8yGAAAAADWcQ49YjBo1SgsWLNC3334rHx8f65gIPz8/eXh4yM/PTyNGjNC4ceMUEBAgX19fPfzww+rcubOuuuoqSdKNN96opk2b6p577tG0adOUlJSkf/3rXxo1ahRHJQAAAIArxKHB4u2335YkXXfddaWmz5kzR8OHD5ckvf766zKbzRo0aJAKCgrUq1cvvfXWW9a2Tk5O+v777/XPf/5TnTt3lpeXl4YNG6bnn3/+Sm0GAAAAUOM5NFgYhnHJNu7u7po1a5ZmzZp1wTZRUVH68ccf7VkaAAAAgMtQaa4KBQAAAKDqIlgAAAAAsBnBAgAAAIDNCBYAAAAAbEawAAAAAGAzggUAAAAAmxEsAAAAANiMYAEAAADAZgQLAAAAADYjWAAAAACwGcECAAAAgM0IFgAAAABsRrAAAAAAYDOCBQAAAACbESwAAAAA2IxgAQAAAMBmBAsAAAAANiNYAAAAALAZwQIAAACAzQgWAAAAAGxGsAAAAABgM4IFAAAAAJsRLAAAAADYjGABAAAAwGYECwAAAAA2I1gAAAAAsBnBAgAAAIDNCBYAAAAAbEawAAAAAGAzggUAAAAAmxEsAAAAANiMYAEAAADAZgQLAAAAADYjWAAAAACwGcECAAAAgM0IFgAAAABsRrAAAAAAYDOCBQAAAACbESwAAAAA2IxgAQAAAMBmBAsAAAAANiNYAAAAALAZwQIAAACAzQgWAAAAAGxGsAAAAABgM4IFAAAAAJsRLAAAAADYjGABAAAAwGYECwAAAAA2I1gAAAAAsBnBAgAAAIDNCBYAAAAAbEawAAAAAGAzhwaLVatW6ZZbblF4eLhMJpO++eabUvOHDx8uk8lU6tG7d+9SbdLS0jR06FD5+vrK399fI0aMUHZ29hXcCgAAAAAODRY5OTlq1aqVZs2adcE2vXv3VmJiovXx6aeflpo/dOhQ7dy5U0uXLtX333+vVatWaeTIkRVdOgAAAIC/cXbkyvv06aM+ffpctI2bm5vCwsLOO2/37t366aeftH79erVv316S9MYbb6hv37565ZVXFB4ebveaAQAAAJyr0o+xWLFihUJCQtSoUSP985//VGpqqnXe6tWr5e/vbw0VktSjRw+ZzWatXbv2gn0WFBQoMzOz1AMAAABA+VXqYNG7d2999NFHWrZsmaZOnaqVK1eqT58+KikpkSQlJSUpJCSk1DLOzs4KCAhQUlLSBfudMmWK/Pz8rI+6detW6HYAAAAA1Z1DT4W6lMGDB1t/b9GihVq2bKn69etrxYoV6t69e7n7nTBhgsaNG2d9npmZSbgAAAAAbFCpj1icrV69egoKCtKBAwckSWFhYTpx4kSpNsXFxUpLS7vguAzp9LgNX1/fUg8AAAAA5VelgsWxY8eUmpqq2rVrS5I6d+6s9PR0bdy40dpm+fLlslgs6tSpk6PKBAAAAGoch54KlZ2dbT36IEmHDh3Sli1bFBAQoICAAE2ePFmDBg1SWFiY4uLi9MQTT6hBgwbq1auXJKlJkybq3bu3HnzwQc2ePVtFRUUaPXq0Bg8ezBWhAAAAgCvIoUcsNmzYoDZt2qhNmzaSpHHjxqlNmzaaOHGinJyctG3bNt16661q2LChRowYoXbt2um3336Tm5ubtY/58+ercePG6t69u/r27auuXbvq3XffddQmAQAAADVSuY5YHDx4UPXq1bN55dddd50Mw7jg/J9//vmSfQQEBGjBggU21wIAAACg/Mp1xKJBgwa6/vrr9cknnyg/P9/eNQEAAACoYsoVLDZt2qSWLVtq3LhxCgsL0z/+8Q+tW7fO3rUBAAAAqCLKFSxat26t//znP0pISNCHH36oxMREde3aVc2bN9drr72mkydP2rtOAAAAAJWYTYO3nZ2dNXDgQH3xxReaOnWqDhw4oMcee0x169bVvffeq8TERHvVCQAAAKASsylYbNiwQf/3f/+n2rVr67XXXtNjjz2muLg4LV26VAkJCerXr5+96gQAAABQiZXrqlCvvfaa5syZo71796pv37766KOP1LdvX5nNp3NKTEyM5s6dq+joaHvWCgAAAKCSKlewePvtt3X//fdr+PDh1rtgny0kJEQffPCBTcUBAAAAqBrKFSz2799/yTaurq4aNmxYeboHAAAAUMWUa4zFnDlz9MUXX5wz/YsvvtC8efNsLgoAAABA1VKuYDFlyhQFBQWdMz0kJEQvvfSSzUUBAAAAqFrKFSzi4+MVExNzzvSoqCjFx8fbXBQAAACAqqVcwSIkJETbtm07Z/rWrVsVGBhoc1EAAAAAqpZyBYshQ4bokUce0a+//qqSkhKVlJRo+fLlGjNmjAYPHmzvGgEAAABUcuW6KtQLL7ygw4cPq3v37nJ2Pt2FxWLRvffeyxgLAAAAoAYqV7BwdXXVZ599phdeeEFbt26Vh4eHWrRooaioKHvXBwAAAKAKKFewOKNhw4Zq2LChvWoBAAAAUEWVK1iUlJRo7ty5WrZsmU6cOCGLxVJq/vLly+1SHAAAAICqoVzBYsyYMZo7d65uuukmNW/eXCaTyd51AQAAAKhCyhUsFi5cqM8//1x9+/a1dz0AAAAAqqByXW7W1dVVDRo0sHctAAAAAKqocgWL8ePH6z//+Y8Mw7B3PQAAAACqoHKdCvX777/r119/1eLFi9WsWTO5uLiUmv/VV1/ZpTgAAAAAVUO5goW/v78GDBhg71oAAAAAVFHlChZz5syxdx0AAAAAqrByjbGQpOLiYv3yyy965513lJWVJUlKSEhQdna23YoDAAAAUDWU64jFkSNH1Lt3b8XHx6ugoEA9e/aUj4+Ppk6dqoKCAs2ePdvedQIAAACoxMp1xGLMmDFq3769Tp06JQ8PD+v0AQMGaNmyZXYrDgAAAEDVUK4jFr/99pv+/PNPubq6lpoeHR2t48eP26UwAAAAAFVHuY5YWCwWlZSUnDP92LFj8vHxsbkoAAAAAFVLuYLFjTfeqBkzZlifm0wmZWdn67nnnlPfvn3tVRsAAACAKqJcp0K9+uqr6tWrl5o2bar8/Hzddddd2r9/v4KCgvTpp5/au0YAAAAAlVy5gkVERIS2bt2qhQsXatu2bcrOztaIESM0dOjQUoO5AQAAANQM5QoWkuTs7Ky7777bnrUAAAAAqKLKFSw++uiji86/9957y1UMAAAAgKqpXMFizJgxpZ4XFRUpNzdXrq6u8vT0JFgAAAAANUy5rgp16tSpUo/s7Gzt3btXXbt2ZfA2AAAAUAOVK1icT2xsrF5++eVzjmYAAAAAqP7sFiyk0wO6ExIS7NklAAAAgCqgXGMsFi1aVOq5YRhKTEzUm2++qS5dutilMAAAAABVR7mCRf/+/Us9N5lMCg4O1g033KBXX33VHnUBAAAAqELKFSwsFou96wAAAABQhdl1jAUAAACAmqlcRyzGjRtX5ravvfZaeVYBAAAAoAopV7DYvHmzNm/erKKiIjVq1EiStG/fPjk5Oalt27bWdiaTyT5VAgAAAKjUyhUsbrnlFvn4+GjevHmqVauWpNM3zbvvvvvUrVs3jR8/3q5FAgAAAKjcyjXG4tVXX9WUKVOsoUKSatWqpRdffJGrQgEAAAA1ULmCRWZmpk6ePHnO9JMnTyorK8vmogAAAABULeUKFgMGDNB9992nr776SseOHdOxY8f05ZdfasSIERo4cKC9awQAAABQyZVrjMXs2bP12GOP6a677lJRUdHpjpydNWLECE2fPt2uBQIAAACo/MoVLDw9PfXWW29p+vTpiouLkyTVr19fXl5edi0OAAAAQNVg0w3yEhMTlZiYqNjYWHl5eckwDHvVBQAAAKAKKVewSE1NVffu3dWwYUP17dtXiYmJkqQRI0ZwqVkAAACgBipXsHj00Ufl4uKi+Ph4eXp6Wqffeeed+umnn+xWHAAAAICqoVzBYsmSJZo6daoiIiJKTY+NjdWRI0fK3M+qVat0yy23KDw8XCaTSd98802p+YZhaOLEiapdu7Y8PDzUo0cP7d+/v1SbtLQ0DR06VL6+vvL399eIESOUnZ1dns0CAAAAUE7lChY5OTmljlSckZaWJjc3t8vqp1WrVpo1a9Z550+bNk0zZ87U7NmztXbtWnl5ealXr17Kz8+3thk6dKh27typpUuX6vvvv9eqVas0cuTIy98oAAAAAOVWrmDRrVs3ffTRR9bnJpNJFotF06ZN0/XXX1/mfvr06aMXX3xRAwYMOGeeYRiaMWOG/vWvf6lfv35q2bKlPvroIyUkJFiPbOzevVs//fST3n//fXXq1Eldu3bVG2+8oYULFyohIaE8mwYAAACgHMp1udlp06ape/fu2rBhgwoLC/XEE09o586dSktL0x9//GGXwg4dOqSkpCT16NHDOs3Pz0+dOnXS6tWrNXjwYK1evVr+/v5q3769tU2PHj1kNpu1du3a8wYWSSooKFBBQYH1eWZmpl1qBgAAAGqqch2xaN68ufbt26euXbuqX79+ysnJ0cCBA7V582bVr1/fLoUlJSVJkkJDQ0tNDw0Ntc5LSkpSSEhIqfnOzs4KCAiwtjmfKVOmyM/Pz/qoW7euXWoGAAAAaqrLPmJRVFSk3r17a/bs2XrmmWcqoqYKN2HCBI0bN876PDMzk3ABAAAA2OCyj1i4uLho27ZtFVFLKWFhYZKk5OTkUtOTk5Ot88LCwnTixIlS84uLi5WWlmZtcz5ubm7y9fUt9QAAAABQfuU6Feruu+/WBx98YO9aSomJiVFYWJiWLVtmnZaZmam1a9eqc+fOkqTOnTsrPT1dGzdutLZZvny5LBaLOnXqVKH1AQAAAPifcg3eLi4u1ocffqhffvlF7dq1k5eXV6n5r732Wpn6yc7O1oEDB6zPDx06pC1btiggIECRkZEaO3asXnzxRcXGxiomJkbPPvuswsPD1b9/f0lSkyZN1Lt3bz344IOaPXu2ioqKNHr0aA0ePFjh4eHl2TQAAAAA5XBZweLgwYOKjo7Wjh071LZtW0nSvn37SrUxmUxl7m/Dhg2lLk97ZtzDsGHDNHfuXD3xxBPKycnRyJEjlZ6erq5du+qnn36Su7u7dZn58+dr9OjR6t69u8xmswYNGqSZM2dezmYBAAAAsNFlBYvY2FglJibq119/lSTdeeedmjlz5jlXbiqr6667ToZhXHC+yWTS888/r+eff/6CbQICArRgwYJyrR8AAACAfVzWGIuzQ8DixYuVk5Nj14IAAAAAVD3lGrx9xsWONgAAAACoOS4rWJhMpnPGUFzOmAoAAAAA1dNljbEwDEPDhw+Xm5ubJCk/P18PPfTQOVeF+uqrr+xXIQAAAIBK77KCxbBhw0o9v/vuu+1aDAAAAICq6bKCxZw5cyqqDgAAAABVmE2DtwEAAABAIlgAAAAAsAOCBQAAAACbESwAAAAA2IxgAQAAAMBmBAsAAAAANiNYAAAAALAZwQIAAACAzQgWAAAAAGxGsAAAAABgM4IFAAAAAJsRLAAAAADYjGABAAAAwGYECwAAAAA2I1gAAAAAsJmzowsAgL+Lj49XSkqK3fsNCgpSZGSk3fsFAACnESwAVBrx8fFq3KSJ8nJz7d63h6en9uzeTbgAAKCCECwAVBopKSnKy83V0CenKzSyvt36TY6P0/ypjyslJYVgAQBABSFYAKh0QiPrKyK2maPLAAAAl4HB2wAAAABsRrAAAAAAYDOCBQAAAACbESwqgTXH8uQe01bZRVKJxXB0OQAAAMBlY/B2JfDepkyF3vG8fk6UliQekJ+Hi1rU8VOLCD+5OJH9AAAAUPnxqdXBSiyGYgNcVHjyiJxMhgxJ6XlF+u1Aiub8cVgbj5xSUYnF0WUCAAAAF0WwcDAns0lPdQ1Q4oej1C+iSA90jVGPJiHy83BRXlGJfj+Qos/WH1VmXpGjSwUAAAAuiGBRiZhMkpebs5qF++meq6LUs0moPF2dlJpTqIXrj+p4ep6jSwQAAADOi2BRSTmZTWoa7qvBHeoq2MdNeUUl+mrTMe1OzHR0aQAAAMA5CBaVnI+7i25vF6EGId6yGNKSXcnafyLL0WUBAAAApRAsqgAXJ7P6Ng9T8zq+kqSfdyZzWhQAAAAqFYJFFWEymXR9oxDVC/JSicXQd1sTlJZT6OiyAAAAAEkEiyrFbDKpd/Mwhfm6q6DYom+2HFduYbGjywIAAAAIFlWNi5NZt7YKl7+Hi7Lyi7V0V7IMg7t1AwAAwLG483YV5OHqpL4tauuzDUd1ODVXW49lqHVdf0eXBVyUxWIoJbtASZn5SsrI18nsAuUWlCinsFh5hSWSSUo9kSW/qwdrf6ZZ2UmZ8nR1lrebs3w9nOVs5nsQAAAqM4JFFRXs46ZuDYK0Yt9J/b4/ReH+7grxcXd0WYAkKSu/SNuPZWjLsXTtS8rSgZPZijuRo7yikksu69/tbm1Ll7alJ1unmST5ergowMtVoT5uCvNzV5ivu9xcnCpuIwAAwGUhWFRhLSP8FJ+Wq4MpOVq8I0lDOkTK1ZlvdXHlpeUUas3BVK2OS9XaQ6nafyJb5ztDz2w6HYrD/DwU7O0mH3dnebo6ycPFSYakhKRkff7Fl2rS5UbJzVt5hSXKyi9WYYlFGXlFysgr0qGUHGt/wT5uigrwVFSgp2r7ecjJbLpyGw0AAEohWFRhJpNJPZqGasHaeKXnFumPuBRd3yjE0WXBBvHx8UpJSbF7v0FBQYqMjLRbf4ZhaE9Sln7Zlaxfdidr67GMc9rU8fdQ67r+ahruqwYh3ooN8VZkgKecnS4cfjdtytfsB2epU7/uioiNsK4rt7BEp3ILlZpdqKTMfCVm5Csjr0gnswp0MqtAG46ckpuzWfWDvRUb6q26tTwJGQAAXGEEiyrOw8VJPZuG6uvNx7XtWIYahfoo3N/D0WWhHOLj49W4SRPl5ebavW8PT0/t2b3bpnBRWGzR2kOpf4WJE+fcS6Wur7Oah7iqRYirGgW6qpbHmdOUMqWCTKUfldKPXnwdu3fvPmeayWSSl5uzvNycFVHLU63+mp5bWKz4tFwdST39yCsq0a7ETO1KzJS7i1mNw3zVLNxXQd5u5d5mAABQdgSLaiAywFNNa/tqV2Kmlu0+oSGd6jLQtQpKSUlRXm6uhj45XaGR9e3Wb3J8nOZPfVwpKSmXHSyKSyz6My5V321N0E87k5SV/7/LGxtFBco7vEV5B9YqL269juSc0u92qjk7O/uSbTxdndU4zFeNw3xlMQwlpOdpf3K29p/IVl5RibYcTdeWo+kK9XVTXWezZOafOwAAKhL/01YT3WKDdCglR2m5hdpw+JSuqhfo6JJQTqGR9RUR28xh67dYDG2MP6Xvtibox+2JSsn+340Yg7zd1KNJiGLcsvXPATforvEvKrT7Q5Iessu6d69bqcXz/qP8/PzLWs5sMimilqciannq2obBOpKWq50JGTqUkqPkzAIly1l1HvpAX+7OVr3GhfL3dLVLvQAA4H8IFtWEu4uTrmsUrMU7krT+cJpiQ7wdXRKqmAMnsvTlpuP6dvNxJWT874N9gJer+rYI0y0tw9UhOkBms0mbNm2SUVxg9xCUHB9ncx9ms0kxQV6KCfJSbmGxdiRkavPhFOX7BGr+9ix9tWe5bm8fofu7xCg6yMsOVQMAAIlgUa3EhnhrT5CXDqXkaNmeE+rs6+iKUNmdyinUd9sS9OXGY6UGYHu7OevGZqG6tVW4ujQIkstFBlxXZp6uzuoYHaCwwkS99/aban7bGCXlSx+tPqKPVx9Rpzruur2Zt2L8XcrVv70HxQMAUJURLKoRk8mk6xsF62harhIz8nWMS8/iPIpKLFqx96S+3HhMy/Ykq6jk9HVhncyn95+BbSN0Q+MQuVeje0RknzqpnJ3LtXbncrlHtpRPxwHyrN9Ba47na83xfOXs/UMZfyxU0clDl9WvPQbFAwBQXRAsqhkfdxd1iA7Q6oOp2p7uJJMLV8TBaQdPFem773Zq0ZYEpeb8b9xE09q+GtQuQv1ah1fbKyjlZWdKkm76xzNq1LKdJCmzqFB7Mpx0NNcsr0Zd5NWoi8I9LGrqVyI/1/PchOMstgyKBwCgOiJYVENtI/21MyFDmfnF8rvqdkeXAwfKKSjWvkyzat//ph5bmiLp9D0ygrzd1L91uAa1i1CT2jXnnLnA8KhSY0KaSkrNLtC6w2nal5ythDyzEvLMahDsravqBSiwmgYtAAAqAsGiGnJ2MqtbbLB+2J4o344DlZRdfOmFUG2UWAwdSsnRzoQMHUnNlSFnuQZHy8Us3di8tm5rG6FusUEXvVFdTRLo7aY+zWurY3SB1h1K074T2Tpw8vSjSW0fXRUTKF+P8o3BAACgJqnUnywmTZokk8lU6tG4cWPr/Pz8fI0aNUqBgYHy9vbWoEGDlJyc7MCKK4/6wV4KdrPI5OyquVszHV0OroDU7AKt2n9SH/x+SD9sT9Th1FwZkgJcLUr96U19cGuoZt3VVtc3DiFUnEegt5v6tKitoZ0iVT/49NWididm6aPVR7Ry30nlFhLQAQC4mEp/xKJZs2b65ZdfrM+dnf9X8qOPPqoffvhBX3zxhfz8/DR69GgNHDhQf/zxhyNKrVRMJpNa1yrRkgRD644X6Pf9KeoaG+TosqqN+Ph4paSk2LXP8911+lIKiku0LylbOxMzlJxZYJ3u5eqkJrV91bS2r3IS9mvz1p/k7fpve5ZbbQV5u+nmluFKysjXH3EpOnYqT1uOpmtXQqbaRvqrTWQtuXJhBAAAzlHpg4Wzs7PCwsLOmZ6RkaEPPvhACxYs0A033CBJmjNnjpo0aaI1a9boqquuutKlVjq+roayNv0g3/a3avJ3O/XjmG5V9rKhlUl8fLwaN2mivNzcCun/UnedNgxDx9PztDMhUwdOZKvYcnqgsdkkxQR5qVm4n6ICPGU2myRJORVSZfUX5ueugW3qKD4tV3/EpepkVoHWHErT1mMZ6hgToFqXHt8NAECNUumDxf79+xUeHi53d3d17txZU6ZMUWRkpDZu3KiioiL16NHD2rZx48aKjIzU6tWrCRZ/yfh9vupc3U/7T2TrkzVHdF+XGEeXVOWlpKQoLzdXQ5+crtDI+nbr91J3nc7KL9LuxCztSsxURl6RdXqAl6uahfuqcZiPPF0r/Vu6SjGZTIoK9FJkgKf2n8jWn3Gpysgr0sp9J+Xp5CKvZtfLYpAwAACQKnmw6NSpk+bOnatGjRopMTFRkydPVrdu3bRjxw4lJSXJ1dVV/v7+pZYJDQ1VUlLSRfstKChQQcH/ThvJzKy+YxAsBTka2sJXszdm6LWl+3Rrq3CudGMnV+Ku0xbD0OHUHG0/lqHDqf87QuLqZFbDMG81q+2nUF83mUwmu9WBc5lMJjUM9VH9YG/tSsjU2kOpyiksUdDN4/XY0hS94HtS3WKDHV0mAAAOVamDRZ8+fay/t2zZUp06dVJUVJQ+//xzeXh4lLvfKVOmaPLkyfYosUroHuOh3xIN7UzI1CtL9mnKwBaOLgmXkFNQrJ2JmdpxPENZ+f8bNBzh76Gm4b5qEOLNaW0O4GQ2qUWEnxrX9tHKzXu1PTlfh9O9dc8H63RNw2A91buxmobXnMv3AgDwd1Xqk4m/v78aNmyoAwcOKCwsTIWFhUpPTy/VJjk5+bxjMv5uwoQJysjIsD6OHj1agVU7npPZpEm3nv5mfeH6eO04nuHginA+hiS3iGbaVVBLH/5xSKvjUpWVXyx3Z7PaRvprWOco630nCBWO5eJkVmM/i46/O1I3x3rJxcmkVftO6qY3ftP4z7cqIT3P0SUCAHDFValPJ9nZ2YqLi1Pt2rXVrl07ubi4aNmyZdb5e/fuVXx8vDp37nzRftzc3OTr61vqUd11iA7Qra3CZRjSpEU7ZXBeeKVRYjG0JzFTWxSjsKFTdbLEQxZDCvN1141NQzWia4y6xQbL39PV0aXiLJa8TN3fxle/jLtWN7esLcOQvtx0TNe/skJTf9qjzPyiS3cCAEA1UalPhXrsscd0yy23KCoqSgkJCXruuefk5OSkIUOGyM/PTyNGjNC4ceMUEBAgX19fPfzww+rcuTMDty9gQt/GWrorWRuOnNKirQnq17qOo0uq0fKLSrT9eIa2HktXTkGJJHdZivJVx71E17dromAfxsJUFVGBXnrzrrYa0fWUpvy4R+sOp+ntFXFauC5ej3SP1dBOUVyiFgBQ7VXq/+mOHTumIUOGqFGjRrrjjjsUGBioNWvWKDj49CDJ119/XTfffLMGDRqka665RmFhYfrqq68cXHXlVdvPQ6OuP30Voyk/7uGGXw6SkVekFXtP6IPfD+nPuFTlFJTI09VJUTqh42/dp4ZuGYSKKqpNZC199o+r9N697VU/2Euncos0+btd6vn6Sv2wLZEjhQCAaq1SH7FYuHDhRee7u7tr1qxZmjVr1hWqqOp7oFs9fbbhqI6m5emtX+P0WK9Gji6pxjiVW6j1h9O0JylLZz5fBnm7qk1kLTUM9dbWX3fIkp/l2CJhM5PJpJ5NQ3V9o2B9tuGoXl+6X0dSczVqwSa1ruuvp/s2UceYAEeXCQCA3VXqIxawP3cXJ/3rpqaSpHd/O6j41Iq5yRv+Jy2nUD/vTNLHq49od+LpUBEZ4KkBberoro6RalrbV85m3orVjbOTWUM7RWnl49dpbI9Yebo6acvRdN3xzmo9+NEGHThx8RshAgBQ1VTqIxaoGDc2DVW32CD9tj9FL/6wS+/e297RJVVLqdkFWnc4TfuS//cBMibISx2jAxTm537F69m9e3el7Ku683Jz1tgeDXVXx0jNWLZfn60/qqW7krV8zwkN7lBXY3s05NQ3AEC1QLCogUwmkybe3FS9//ObluxK1m/7ubmXPWXmFWn1wVTtSfrfaU31g73UITpAob5XPlBkpp2UJN1999127zs7m2/dyyrE110vDWih+7tE6+XFe/XL7mTNXxuvb7ck6OEbGmh4l2i5OTs5ukwAAMqNYFFDxYb6aFjnaH34xyFN/m6XFo/pxr0RbJRfVKL1h9O09WiGSv4aRFE/2EudYgId+o10XvbpO8vf9I9n1KhlO7v0uXvdSi2e9x/l5+fbpb+apEGIj94f1l5rD6bq3z/u1rZjGZqyeI8WrIvXM32bqGfTUB09elQpKSl2X3dQUJAiIyPt3i8AABLBokYb0yNW3245rgMnsvXR6iMa0TXG0SVVScUlFm09lqH1h9NUUGyRJEXU8lDXBkEOOUJxIYHhUYqIbWaXvpLj4+zST3VQ3tPCXCRN7OyhFYelT7Zn6UhqrkZ+vFGN/aXf3xynnOP77FmmJMnD01N7du8mXAAAKgTBogbz83DRY70aacJX2zXjl33q1zpcQd6c611WhiHtSczUH3Gpyi44feneQG9Xda0fpKhAT5lMJgdXiIpkz1PMTK4e8rvqdvl2GKA96S4KvGu6mlhS1SnKX252OjsqOT5O86c+rpSUFIIFAKBCECxquDva19X8tUe043impv20R9Nua+XokqoEl5AYrTzhrNSjyZIkbzdnda4XqMa1fWQmUNQIFXGKWXaxoT8PJivLPVQnzSFammzWVfUC1aKOn5zM7FcAgMqNYFHDOZlNmnxrMw16e7U+33BMA9tG6Kp6gY4uq9JKzy3UuxszVHvYDKUWmOVsNqlDTIDa1vWXM2NUaiR7nmImSTkJi/TfT2eo/l3PK6fYRSv3ndT2Yxm6tlGwIgM87bYeAADsjU9CULuoAA3pePrUiKe/2q78ohIHV1T5WCyGFq6L1w2vrtRPcbkymZ0U4VmieztHqWN0AKECdlUQv13t3E/qhkYh8nBxUlpuob7efFyLdyQq56/T7gAAqGz4NARJ0lN9GivYx00HU3I069cDji6nUtlxPEMD3vpDT321XWk5harr66ykTyeoU1CJfNxdHF0eqimTSWoR4adhnaPUKsJPJkn7kk9faGHL0XRZLIajSwQAoBSCBSSdHsg9+dbTp3O8vSJOe/92D4aaKq+wRFN+3K1+s/7Q1mMZ8nFz1rM3N9WrNwapIH67o8tDDeHm4qTrGoXozg51FerrpsISi1buO6mF648qMSPP0eUBAGBFsIBVn+Zh6tEkVMUWQ099tU0lNfgb0T8PpKj3f1bpnVUHVWIxdHPL2lr22LUa0TVGzgyihQOE+rrrjvZ1dUOjELk5m3Uyu0CfbzimZbuTOX0RAFApMHgbViaTSc/3a6Y1B1O1OT5ds1fGadT1DRxd1hWVkVukf/+4S59vOCZJqu3nrhf6NVePpqEOrgyQzCaTWkT4qX6Il34/kKLdiVnakZCpuJM56tIgUE1r+3KZYwCAw3DEAqWE+3vouVuaSpJeX7pPO45nOLiiK8MwDP2wLVHdX1tpDRX3do7SkkevIVSg0vF0ddaNTcN0W9sIBXq5Kq+oRL/sPqEvNh5TSnaBo8sDANRQBAuc47Z2EerdLEzFFkNjFm5WXmH1Ps0iKSNfIz/eqFELNiklu0D1g73034c66/l+zRmcjUqtTi0PDekYqW4NguTiZFJiRr4+XRevPw6kqLjE4ujyAAA1DMEC5zCZTHppYAuF+Lgp7mSOpize7eiSKoTFYmj+2iPq+dpKLd2VLBcnkx7pHqsfx3RT++gAR5cHlImT2aS2UbV0z1VRqh/sJYshbThySp+sjdeR1BxHlwcAqEEIFjivAC9XTb/99F24P1p9REt2Jjm4IvuKO5mtwe+u0TNf71BWQbFa1/XX9w9307ieDeXm7OTo8oDL5uPuoptbhuvmlrXl7easjLwifbMlQT/tSOLeFwCAK4LB27igaxsG6/4uMfrwj0Ma9/lWfTPKWw1CvB1dlk2KSix6Z2WcZi4/oMJiizxdnfR4r0a6t3O0nLjaE6qB+sHeqlvLU6sPpmrr0XTtTc7S4dQcNfM1S2IfBwBUHI5Y4KIm9G2sjjEByi4o1siPNigzv8jRJZXb1qPpuuWN3/XKkn0qLLbo2obBWvLoNbqvSwyhAtWKq7NZ1zYM1p0d6irEx00FxRZtSnNW6NCXFZ9Rdd/DAIDKjWCBi3JxMuutoW1V289dB1Ny9OjCLVXujr+5hcV64ftdGvDWH9qTlKVani6acWdrzb2vgyJqeTq6PKDChPq66872dXVNbJCcTIbcI5pp/JIUTf95D/e+AADYHadC4ZKCvN30zj3tdNvs1Vq254SmLN6tp/s2sfv18uPj45WSkmLXPtcdz9fcbdlKyjr9LW3/1uF69uamCvR2s+t6gMrKbDapTWQteeUk6MuVm+QZe5Vm/Rqn77cl6sX+zdUtNtjRJQIAqgmCBcqkZYS/pg5qoUc/26r3fjskH3cXPdI91m79x8fHq3GTJsrLzbVLf06+IQro8Q95xnaSJIV6u+jl21vr+kYhdukfqGo8naWTX72otxb9oXnb83QkNVf3fLBO/VuH6183N1UQYRsAYCOCBcpsQJsIpeUU6YXvd+m1pfvk6eqkB7rVs0vfKSkpysvN1dAnpys0sn65+7EY0v5Ms3ZnOqnEMMkkQ+mr/6sF00frakIFoE513HV3zw56dck+zVt9WN9sSdCve09qQp/GuqN9XZkZbwQAKCeCBS7LiK4xyiko1mtL9+nFH3bLzdmsezpH263/0Mj6iohtVq5lj53K1co9J5WWWyhJquPvoaYeGXp/1Ty5Oz9itxqBqs7H3UWTbm2mAW3q6Omvt2tnQqae+mq7vtx0TC8NaKHYUB9HlwgAqIIIFrhsD9/QQDmFxXpn5UE9++1OHTuVpyd7N3bYN53puYX640CqDpzMliR5uDipW2yQGof56PiBDEnS7t32u8mfPfsCHKlVXX99O6qL5v55WK8u2af1h0+p78zf9NC19TXq+gZyd+GeLgCAsiNY4LKZTCY91bux3JydNHPZfr2z6qAOpeRoxuDW8nS9crtUXmGJ1h1O07Zj6bIYp6/Q37yOn66uH2j9QJSZdlKSdPfdd9t9/dnZ2XbvE6ho5wvGbb2k128M0PubM7UhoUBvLD+g/647pJHt/NQq9OJjL4KCghQZGVlR5QIAqhCCBcrFZDJpXM+GqhfkpSe+3KYlu5I18K0/9eodrdQs3K9C151bWKxN8enadixdRSWnL30bFeiprg2CzhmAmpedKUm66R/PqFHLdnZZ/+51K7V43n+Un59vl/6AK6GsIdujYWcF9HhIiQrU5JVpyt6xXKd+/UCW3Izzt/f01J7duwkXAACCBWzTv00d1Q3w0MiPNmpPUpZuffMPPdAtRmO7N5SHq31Po0jPLdTWYxnacTxDxX/dSyPEx01X1w9UVKDXRZcNDI8q99iNsyXHx9mlH+BKupyQXWSRdqaXKC7bLO/mN6hWy+vVwr9E0V4W/f0q08nxcZo/9XGlpKQQLAAABAvYrl1UgBaP7abJi3bph+2JemflQS3enqR/Xldf/VvXsSlgFFssik/N1bbjGTqS+r9L0Yb4uKlTvQDFBHrZ/X4aQHVW1pAdIykpI1/L95zQyewCbUpzVpLFXd0bhyrAy7XiCwUAVDkEC9hFiI+7Zg1tqwG7kvXstzsUn5arCV9t19Sf9uiujpHq26K2mtT2lVMZBnjnFhYrIT1fB05m69DJHBWWWKzzogM91aquv6ICPAkUQAUL83PX4A51teVoulYfTFVCer7mrz2i9lEBah9dy9HlAQAqGYIF7KpH01BdVT9QC9fFa+6fh3XsVJ7eWhGnt1bEycfdWR2iAxQb4i1/T1fV8nSRk9mktJxC7T6YqaBbn9Di4y7KjT9Uqk8vNyc1DPVRyzp+8vfkm1LgSjKbTWobVUsNQrz1694TOpyaq3WH07QrMVNNvM2OLg8AUIkQLGB33m7OeqBbPd3XJUZLdyXriw1Hte5QmrLyi7V8zwkt33PivMt5NblGuSWnfw/wdFVkoKdiQ7xV28+doxOAg/l6uOjWVuE6cDJbv+1PUVZ+sdYXOCvsnle0N7VQbR1dIADA4QgWqDBOZpN6Nw9T7+ZhKrEY2pWQqXWH05SQnqdTuYVKzy1SscVQoJerinPS9dE7b+qWO+9W8yaN5ObM9fOBysZkMik2xEcxgV7adDRd6w6myC28sSYsS9XqlM16sk9j1fH3cHSZAAAHIVjginAym9Qiwk8tIs5/KdpNmzbpzXVfKnTYUEIFUMk5O5nVMTpAtfIT9fniFfJpeaMWbU3QzzuTNKJrjP5xbX35ebg4ukwAwBXGCbIAgHLxcJJSF8/U9J5B6hQToIJii95aEaduU5dr1q8HlFtY7OgSAQBXEMECAGCTerVctHDkVXr3nnZqGOqtzPxiTf95r66ZtkJz/zikguISR5cIALgCCBYAAJuZTCbd2CxMi8dcoxl3tlZkgKdSsgs06btduuGVlfp8w1EV/e3S0QCA6odgAQCwGyezSf3b1NGy8dfq3wOaK9TXTcfT8/TEf7fp+ldW6OPVh5VfxBEMAKiOCBYAALtzcTJraKcorXz8ej3Tt4kCvVx17FSenv12p7pO/VVvr4hTVn6Ro8sEANgRwQIAUGHcXZz04DX19MdTN+j5fs1Ux99DKdkFmvrTHl398nK98vNepWYXOLpMAIAdECwAABXO3cVJ93aO1orHr9Ort7dSgxBvZeUX681fD6jzy8s1/vOt2n4sw9FlAgBswH0sAABXjIuTWYPaRWhAmzpasitZb6+M09aj6fpy0zF9uemY2kT6a/jV0erTvLZcnfnuCwCqEoIFAOCKM5tN6t08TL2ahWrL0XTN+/OwftieqM3x6docv0UveO/WXZ0idUf7CEXU8nR0uQCAMiBYAABssnv3bpv7uLehdGtksJbE5WrJwVylZBdo5rL9mrlsv66uH6hBbSPUp0WYPF35bwsAKiv+hQYAlEtm2klJ0t13323fjs1O8m9+na574F/afDxHf8al6s+4VE38dof6tqitQe0i1DE6QGazyb7rBQDYhGABACiXvOxMSdJN/3hGjVq2s1u/yfFxmj/1cT3bZZpCYjrq603H9d9Nx3QkNVdfbDymLzYeUx1/D/VqFqa+LcLUNrIWIQMAKgGCBQDAJoHhUYqIbVYhfUfU8tTD3WM1+oYG2nDklP674Zh+2J6o4+l5+vCPQ/rwj0MK8XFTr2Zh6tM8TB1jAuTsxKBvAHAEggUAoNIzmUzqEB2gDtEBmtyvmVbuO6nF2xO1bPcJncgq0MdrjujjNUcU4OWqa2KDdE3DYHWLDVawj5ujSweAGoNgAQCoUtxdnNSrWZh6NQtTQXGJ/jyQqsU7ErV0V7LScgr1zZYEfbMlQZLUtLavrmkYrGsaBql9VACXsAWACkSwAABUSmW92pSfpMH1pNujA7U7pVBbkgq0OalAh9KLtSsxU7sSMzV7ZZxcnUxqE1lLHaID1D66ltpG1ZKvu0vFbgQA1CAECwBApWKvq02ZPf3lEd1a7jFt5RHTRoVetbT2UJrWHkqTJJlMUqNQH7WPrqWWdfzVrI6vYkN8OKoBAOVEsAAAVCoVcbWppPg4ff7+BL04+1OdsPhow5E0HUnN1Z6kLO1JypIUL0lycTKpYaiPmoX7qlm4n5rU9lX9YC8FeLnKZOLKUwBwMQQLXLb4+HilpKTYtU973GALQPVi76tNFaceU896nmrbtpUk6URWvjYePqWNR05pR0KGdiZkKiu/WDsTMrUzIVPSMeuy/p4uqh/srfrBXqoX7K36wd6qG+ChiFqe8nbjv1IAkKpRsJg1a5amT5+upKQktWrVSm+88YY6duzo6LKqnfj4eDVu0kR5ubkV0n92dnaF9AsA0rlfYoRK6hsu9Q13k2EE6UROiQ6lF+ngqWIdTC/S0YxincwtUXpukTYeOR1Czubj5qTIQC/V8fdQnVoequPvoWAfNwX7uCnEx03B3u7y9XDmiAeAaq9aBIvPPvtM48aN0+zZs9WpUyfNmDFDvXr10t69exUSEuLo8qqVlJQU5eXmauiT0xUaWd9u/e5et1KL5/1H+fn5dusTAM6wZdyGydlNzrXC5RIYcfoRECHngDpy9guVk4ePsgpK/naU4/xcnc0K9nZTLS8X+Xu4ys/DRX6eLvLzcJG/x18/PV3k+9fvXq7O8nR1koerkzxdneXEDQABVAHVIli89tprevDBB3XfffdJkmbPnq0ffvhBH374oZ566ikHV1c9hUbWt+spCsnxcXbrCwDOVlF3CT8ev1dffTBTb85ZIPfAcB0/laeEjHydzMrXyawCncwqUGZ+sQqLLTqenqfj6XnlWo+LWXJ3NsnN2Xz6p5Ppr+cmuTud/unqZJKzWXIxm+TiZJKLWXK2/m6Si5OkkmJ5uLnKxemvdmaTnP/6/e/LO5tP/+5kNsnJJJlNuugRl6CgIEVGRpbzVQSqj4o4XVyqOu+xKh8sCgsLtXHjRk2YMME6zWw2q0ePHlq9erUDKwMAVDYVcZfwopQjah/urrZto887P7+oRCezCnQiq0AZeYXKyCtSem6R9WdmXpHS8848L1RGXrFyCoqUW1gsk+n0FaqKLFJRoaGswhI7VJxTrqWMkiIZJSWSpViGpUSG5a/fS0pkkkWx9evJ093tdChxMv8VasxydjoTVE7/7vLXvDNtzCbJbDbJbPrrd5Ppr+d//W7627yz2plMp8PP+eabZJL+ykJ/j0RnAlLpaef+bvpbi/Nlqr8HLdN52p1ZvvS0C7y2Zz8/e4Ik46xWZ7c5zyIyztfRJdZ1qfWUZd3nW+85Uy6x3rKt5zy1nad+46+aDEOyGIYsRunnhv76+dd0i1H6+Zn5p5c70+bM8qfnSVJGZqbmL/hUJSUlf/3hTZLJdPp9bJIk8+npJtPp/eev97dMp6eb/mqvM/P+Nq34yCZt/mJmpQ8XVT5YpKSkqKSkRKGhoaWmh4aGas+ePeddpqCgQAUFBdbnGRkZkqTMzAsfxq5IZ8YVHNu/UwV59hu7cPLYIUnSxo0b7TZ2Ye/evZLsX+uZIxZJh/cpzsuzUvdblWqtqH6rUq0V1W9VqrWi+qXWy/931llS4F8Puf718P97C7MkV+3de0gjR47UtXc8KJ+gcFlkVonJSRaZ/3qYZDGZVWJ9fnqaYTr9UzLJIrMMmf5qa1JuTo6y0tPkE1Rbzm4ep+eZTrc5/firjzMfbi7EZJbJySyTU+l7gMQlnjv+BKhp3Bt1q5B+C08c0uHDh+Xv718h/V/Mmc/HZQmqJqMsrSqxhIQE1alTR3/++ac6d+5snf7EE09o5cqVWrt27TnLTJo0SZMnT76SZQIAAABV1tGjRxUREXHRNlX+iEVQUJCcnJyUnJxcanpycrLCwsLOu8yECRM0btw463OLxaK0tDQFBgY65KodmZmZqlu3ro4ePSpfX98rvn5UHuwL+Dv2B5zBvoAz2BdwxpXaFwzDUFZWlsLDwy/ZtsoHC1dXV7Vr107Lli1T//79JZ0OCsuWLdPo0aPPu4ybm5vc3NxKTXPEoaWz+fr68o8EJLEvoDT2B5zBvoAz2BdwxpXYF/z8/MrUrsoHC0kaN26chg0bpvbt26tjx46aMWOGcnJyrFeJAgAAAFCxqkWwuPPOO3Xy5ElNnDhRSUlJat26tX766adzBnQDAAAAqBjVIlhI0ujRoy946lNl5+bmpueee+6c07NQ87Av4O/YH3AG+wLOYF/AGZVxX6jyV4UCAAAA4HhmRxcAAAAAoOojWAAAAACwGcECAAAAgM0IFpXArFmzFB0dLXd3d3Xq1Enr1q1zdEmoYFOmTFGHDh3k4+OjkJAQ9e/fX3v37i3VJj8/X6NGjVJgYKC8vb01aNCgc24Eierl5Zdflslk0tixY63T2A9qluPHj+vuu+9WYGCgPDw81KJFC23YsME63zAMTZw4UbVr15aHh4d69Oih/fv3O7BiVISSkhI9++yziomJkYeHh+rXr68XXnhBfx8Wy75QPa1atUq33HKLwsPDZTKZ9M0335SaX5a/e1pamoYOHSpfX1/5+/trxIgRys7OviL1Eywc7LPPPtO4ceP03HPPadOmTWrVqpV69eqlEydOOLo0VKCVK1dq1KhRWrNmjZYuXaqioiLdeOONysnJsbZ59NFH9d133+mLL77QypUrlZCQoIEDBzqwalSk9evX65133lHLli1LTWc/qDlOnTqlLl26yMXFRYsXL9auXbv06quvqlatWtY206ZN08yZMzV79mytXbtWXl5e6tWrl/Lz8x1YOext6tSpevvtt/Xmm29q9+7dmjp1qqZNm6Y33njD2oZ9oXrKyclRq1atNGvWrPPOL8vffejQodq5c6eWLl2q77//XqtWrdLIkSOvzAYYcKiOHTsao0aNsj4vKSkxwsPDjSlTpjiwKlxpJ06cMCQZK1euNAzDMNLT0w0XFxfjiy++sLbZvXu3IclYvXq1o8pEBcnKyjJiY2ONpUuXGtdee60xZswYwzDYD2qaJ5980ujatesF51ssFiMsLMyYPn26dVp6errh5uZmfPrpp1eiRFwhN910k3H//feXmjZw4EBj6NChhmGwL9QUkoyvv/7a+rwsf/ddu3YZkoz169db2yxevNgwmUzG8ePHK7xmjlg4UGFhoTZu3KgePXpYp5nNZvXo0UOrV692YGW40jIyMiRJAQEBkqSNGzeqqKio1L7RuHFjRUZGsm9UQ6NGjdJNN91U6u8tsR/UNIsWLVL79u11++23KyQkRG3atNF7771nnX/o0CElJSWV2h/8/PzUqVMn9odq5uqrr9ayZcu0b98+SdLWrVv1+++/q0+fPpLYF2qqsvzdV69eLX9/f7Vv397apkePHjKbzVq7dm2F11htbpBXFaWkpKikpOScO4SHhoZqz549DqoKV5rFYtHYsWPVpUsXNW/eXJKUlJQkV1dX+fv7l2obGhqqpKQkB1SJirJw4UJt2rRJ69evP2ce+0HNcvDgQb399tsaN26cnn76aa1fv16PPPKIXF1dNWzYMOvf/Hz/Z7A/VC9PPfWUMjMz1bhxYzk5OamkpET//ve/NXToUEliX6ihyvJ3T0pKUkhISKn5zs7OCggIuCL7BsECcLBRo0Zpx44d+v333x1dCq6wo0ePasyYMVq6dKnc3d0dXQ4czGKxqH379nrppZckSW3atNGOHTs0e/ZsDRs2zMHV4Ur6/PPPNX/+fC1YsEDNmjXTli1bNHbsWIWHh7MvoFLjVCgHCgoKkpOT0zlXeElOTlZYWJiDqsKVNHr0aH3//ff69ddfFRERYZ0eFhamwsJCpaenl2rPvlG9bNy4USdOnFDbtm3l7OwsZ2dnrVy5UjNnzpSzs7NCQ0PZD2qQ2rVrq2nTpqWmNWnSRPHx8ZJk/Zvzf0b19/jjj+upp57S4MGD1aJFC91zzz169NFHNWXKFEnsCzVVWf7uYWFh51wAqLi4WGlpaVdk3yBYOJCrq6vatWunZcuWWadZLBYtW7ZMnTt3dmBlqGiGYWj06NH6+uuvtXz5csXExJSa365dO7m4uJTaN/bu3av4+Hj2jWqke/fu2r59u7Zs2WJ9tG/fXkOHDrX+zn5Qc3Tp0uWcy07v27dPUVFRkqSYmBiFhYWV2h8yMzO1du1a9odqJjc3V2Zz6Y9oTk5OslgsktgXaqqy/N07d+6s9PR0bdy40dpm+fLlslgs6tSpU8UXWeHDw3FRCxcuNNzc3Iy5c+cau3btMkaOHGn4+/sbSUlJji4NFeif//yn4efnZ6xYscJITEy0PnJzc61tHnroISMyMtJYvny5sWHDBqNz585G586dHVg1roS/XxXKMNgPapJ169YZzs7Oxr///W9j//79xvz58w1PT0/jk08+sbZ5+eWXDX9/f+Pbb781tm3bZvTr18+IiYkx8vLyHFg57G3YsGFGnTp1jO+//944dOiQ8dVXXxlBQUHGE088YW3DvlA9ZWVlGZs3bzY2b95sSDJee+01Y/PmzcaRI0cMwyjb3713795GmzZtjLVr1xq///67ERsbawwZMuSK1E+wqATeeOMNIzIy0nB1dTU6duxorFmzxtEloYJJOu9jzpw51jZ5eXnG//3f/xm1atUyPD09jQEDBhiJiYmOKxpXxNnBgv2gZvnuu++M5s2bG25ubkbjxo2Nd999t9R8i8ViPPvss0ZoaKjh5uZmdO/e3di7d6+DqkVFyczMNMaMGWNERkYa7u7uRr169YxnnnnGKCgosLZhX6iefv311/N+Phg2bJhhGGX7u6emphpDhgwxvL29DV9fX+O+++4zsrKyrkj9JsP4220cAQAAAKAcGGMBAAAAwGYECwAAAAA2I1gAAAAAsBnBAgAAAIDNCBYAAAAAbEawAAAAAGAzggUAAAAAmxEsAAAAANiMYAEANZTJZNI333xzwfnR0dGaMWOGXdd53XXXaezYsTbV9XeTJk1S69atba4LAGA7ggUAVFMnT57UP//5T0VGRsrNzU1hYWHq1auX/vjjjzItv379eo0cObJMbSdNmiSTyXTRR1klJiaqT58+ZW4PAKgcnB1dAACgYgwaNEiFhYWaN2+e6tWrp+TkZC1btkypqallWj44OLjM63rsscf00EMPWZ936NBBI0eO1IMPPnjZdYeFhV32MgAAx+OIBQBUQ+np6frtt980depUXX/99YqKilLHjh01YcIE3Xrrredd5rnnnlPt2rW1bds2SeeeCmUymfT+++9rwIAB8vT0VGxsrBYtWiRJ8vb2VlhYmPXh5OQkHx+fUtPOsFgseuKJJxQQEKCwsDBNmjSpVB1nnwp17NgxDRkyRAEBAfLy8lL79u21du3a825DXFyc6tWrp9GjR8swDM2dO1f+/v76+eef1aRJE3l7e6t3795KTEwstdz777+vJk2ayN3dXY0bN9Zbb71lnVdYWKjRo0erdu3acnd3V1RUlKZMmSJJMgxDkyZNsh4VCg8P1yOPPHLxPw4AVFMECwCohry9veXt7a1vvvlGBQUFF21rGIYefvhhffTRR/rtt9/UsmXLC7adPHmy7rjjDm3btk19+/bV0KFDlZaWdlm1zZs3T15eXlq7dq2mTZum559/XkuXLj1v2+zsbF177bU6fvy4Fi1apK1bt+qJJ56QxWI5p+22bdvUtWtX3XXXXXrzzTetp1/l5ubqlVde0ccff6xVq1YpPj5ejz32mHW5+fPna+LEifr3v/+t3bt366WXXtKzzz6refPmSZJmzpypRYsW6fPPP9fevXs1f/58RUdHS5K+/PJLvf7663rnnXe0f/9+ffPNN2rRosVlvR4AUF1wKhQAVEPOzs6aO3euHnzwQc2ePVtt27bVtddeq8GDB5cKDsXFxbr77ru1efNm/f7776pTp85F+x0+fLiGDBkiSXrppZc0c+ZMrVu3Tr179y5zbS1bttRzzz0nSYqNjdWbb76pZcuWqWfPnue0XbBggU6ePKn169crICBAktSgQYNz2v3555+6+eab9cwzz2j8+PGl5hUVFWn27NmqX7++JGn06NF6/vnnrfOfe+45vfrqqxo4cKAkKSYmRrt27dI777yjYcOGKT4+XrGxseratatMJpOioqKsy8bHxyssLEw9evSQi4uLIiMj1bFjxzK/FgBQnXDEAgCqqUGDBikhIUGLFi1S7969tWLFCrVt21Zz5861tnn00Ue1du1arVq16pKhQlKpUOLl5SVfX1+dOHHisuo6+4hI7dq1L9jHli1b1KZNG2uoOJ/4+Hj17NlTEydOPCdUSJKnp6c1VJy9vpycHMXFxWnEiBHWozze3t568cUXFRcXJ+l0mNqyZYsaNWqkRx55REuWLLH2dfvttysvL0/16tXTgw8+qK+//lrFxcVlfzEAoBohWABANebu7q6ePXvq2Wef1Z9//qnhw4dbjxZIUs+ePXX8+HH9/PPPZerPxcWl1HOTyXTe05Ls1YeHh8cl+wsODlbHjh316aefKjMzs0zrMwxD0ulTrSTpvffe05YtW6yPHTt2aM2aNZKktm3b6tChQ3rhhReUl5enO+64Q7fddpskqW7dutq7d6/eeusteXh46P/+7/90zTXXqKio6JJ1A0B1Q7AAgBqkadOmysnJsT6/9dZbtWDBAj3wwANauHChAys7v5YtW2rLli0XHcfh4eGh77//Xu7u7urVq5eysrLK3H9oaKjCw8N18OBBNWjQoNQjJibG2s7X11d33nmn3nvvPX322Wf68ssvrTV5eHjolltu0cyZM7VixQqtXr1a27dvL/9GA0AVxRgLAKiGUlNTdfvtt+v+++9Xy5Yt5ePjow0bNmjatGnq169fqbYDBgzQxx9/rHvuuUfOzs7Wb+MrgyFDhuill15S//79NWXKFNWuXVubN29WeHi4OnfubG3n5eWlH374QX369FGfPn30008/ydvbu0zrmDx5sh555BH5+fmpd+/eKigo0IYNG3Tq1CmNGzdOr732mmrXrq02bdrIbDbriy++UFhYmPz9/TV37lyVlJSoU6dO8vT01CeffCIPD49S4zAAoKYgWABANeTt7a1OnTrp9ddfV1xcnIqKilS3bl09+OCDevrpp89pf9ttt8liseiee+6R2Wy2DmR2NFdXVy1ZskTjx49X3759VVxcrKZNm2rWrFnntPX29tbixYvVq1cv3XTTTfrxxx/LtI4HHnhAnp6emj59uh5//HF5eXmpRYsW1juE+/j4aNq0adq/f7+cnJzUoUMH/fjjjzKbzfL399fLL7+scePGqaSkRC1atNB3332nwMBAe74MAFAlmIwzJ5oCAAAAQDkxxgIAAACAzQgWAAAAAGxGsAAAAABgM4IFAAAAAJsRLAAAAADYjGABAAAAwGYECwAAAAA2I1gAAAAAsBnBAgAAAIDNCBYAAAAAbEawAAAAAGAzggUAAAAAm/0/G5K8tWV3AaAAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "execution_count": 22
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.over_sampling import SMOTE\n",
        "\n",
        "smote=SMOTE(sampling_strategy='minority')\n",
        "X,y=smote.fit_resample(X,y)\n",
        "y.value_counts()"
      ],
      "metadata": {
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "ji_s84qSK6iA",
        "outputId": "e46932c2-3504-4190-c0a1-85ed8af0f96e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Outcome\n",
              "1    500\n",
              "0    500\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outcome</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>500</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "execution_count": 24
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_train_transform = scaler.fit_transform(X_train)\n",
        "X_test_transform = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "P_zhT8mjLTg_"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n"
      ],
      "metadata": {
        "id": "0RxvwVrDMZS0"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reg = LogisticRegression()\n",
        "reg.fit(X_train_transform,y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "GQTL-t2uMmDQ",
        "outputId": "81b4896b-d8b5-4349-afc2-b69cac1f29ec"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = reg.predict(X_test_transform)"
      ],
      "metadata": {
        "id": "Ve9zO_-rMqBa"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print (accuracy_score(y_test,y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kLEZdsrSMsjI",
        "outputId": "14067d0e-9c8a-432f-d66c-88395847f606"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.7532467532467533\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics"
      ],
      "metadata": {
        "id": "OfrMPT8nMvbC"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "confusion_matrix = metrics.confusion_matrix(y_test, y_pred)"
      ],
      "metadata": {
        "id": "3ZAA3UbhM5UY"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [0, 1])\n",
        "\n",
        "cm_display.plot()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "vjeGewnQM_Ad",
        "outputId": "3e0ace99-334f-4d94-b6e7-bb55bbd00247"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rOn7eTYiNBtW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}